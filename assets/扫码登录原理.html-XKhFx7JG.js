import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as p,c as a,d as e}from"./app-AuAuVshg.js";const i="/assets/扫码登录整体流程图-iSVHEJdr.jpg",n="/assets/扫码登录待扫描阶段交互过程图-xdmKnqCS.jpg",o="/assets/扫码登录已扫描阶段交互过程图-3-ylzlg2.jpg",r="/assets/扫码登录已确认阶段交互过程图-ov62jSQ2.jpg",s={},c=e('<p>今天给大家介绍下扫码登录功能是怎么设计的。</p><p>扫码登录功能主要分为三个阶段：<strong>待扫描、已扫描待确认、已确认</strong>。</p><p>整体流程图如图。</p><figure><img src="'+i+'" alt="整体流程图" tabindex="0" loading="lazy"><figcaption>整体流程图</figcaption></figure><p>下面分阶段来看看设计原理。</p><h2 id="_1、待扫描阶段" tabindex="-1"><a class="header-anchor" href="#_1、待扫描阶段" aria-hidden="true">#</a> 1、待扫描阶段</h2><p>首先是待扫描阶段，这个阶段是 PC 端跟服务端的交互过程。</p><p>每次用户打开PC端登录请求，系统返回一个<strong>唯一的二维码ID</strong>，并将二维码ID的信息绘制成二维码返回给用户。</p><p>这里的二维码ID一定是唯一的，后续流程会将二维码ID跟身份信息绑定，不唯一的话就会造成你登录了其他用户的账号或者其他用户登录你的账号。</p><p>此时在 PC 端会启动一个定时器，<strong>轮询查询二维码是否被扫描</strong>。</p><p>如果移动端未扫描的话，那么一段时间后二维码将会失效。</p><p>这个阶段的交互过程如下图所示。</p><figure><img src="'+n+'" alt="待扫描阶段交互过程图" tabindex="0" loading="lazy"><figcaption>待扫描阶段交互过程图</figcaption></figure><h2 id="_2、已扫描待确认阶段" tabindex="-1"><a class="header-anchor" href="#_2、已扫描待确认阶段" aria-hidden="true">#</a> 2、已扫描待确认阶段</h2><p>第二个阶段是已扫描待确认阶段，主要是移动端跟服务端交互的过程。</p><p>首先移动端扫描二维码，获取二维码 ID，然后<strong>将手机端登录的凭证（token）和 二维码 ID 作为参数发送给服务端</strong>。</p><p>此时的手机在之前已经是登录的，不存在没登录的情况。</p><p>服务端接受请求后，会将 token 与二维码 ID 关联，然后会生成一个临时token，这个 token 会返回给移动端，临时 token 用作确认登录的凭证。</p><p>PC 端的定时器，会轮询到二维码的状态已经发生变化，会将 PC 端的二维码更新为已扫描，请在手机端确认。</p><p><strong>这里为什么要有手机端确认的操作？</strong></p><p>假设没有确认这个环节，很容易就会被坏人拦截token去冒充登录。所以二维码扫描一定要有这个确认的页面，让用户去确认是否进行登录。</p><p>另外，二维码扫描确认之后，再往用户app或手机等发送登录提醒的通知，告知如果不是本人登录的，则建议用户立即修改密码。</p><p>这个阶段是交互过程如下图所示。</p><figure><img src="'+o+'" alt="已扫描阶段交互过程图" tabindex="0" loading="lazy"><figcaption>已扫描阶段交互过程图</figcaption></figure><h2 id="_3、已确认" tabindex="-1"><a class="header-anchor" href="#_3、已确认" aria-hidden="true">#</a> 3、已确认</h2><p>扫码登录的最后阶段，用户点击确认登录，移动端携带上一步骤中获取的临时 token访问服务端。</p><p>服务端校对完成后，会更新二维码状态，并且给 PC 端生成一个正式的 token。</p><p>后续 PC 端就是持有这个 token 访问服务端。</p><p>这个阶段是交互过程如下图所示。</p><figure><img src="'+r+'" alt="已确认阶段交互过程图" tabindex="0" loading="lazy"><figcaption>已确认阶段交互过程图</figcaption></figure><p>以上就是整个扫码登录功能的详细设计！</p>',31),g=[c];function _(d,f){return p(),a("div",null,g)}const m=t(s,[["render",_],["__file","扫码登录原理.html.vue"]]);export{m as default};
