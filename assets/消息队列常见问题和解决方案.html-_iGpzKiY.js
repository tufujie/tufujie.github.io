const e=JSON.parse('{"key":"v-15ed1b86","path":"/home/%E9%AB%98%E6%80%A7%E8%83%BD/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","title":"消息队列常见问题和解决方案","lang":"zh-CN","frontmatter":{"title":"消息队列常见问题和解决方案","description":"Kafka 不丢失 生产者端 生产者丢失消息是最复杂的情形了。生产者(Producer) 使用 send 方法发送消息实际上是异步的操作，我们可以通过 get()方法获取调用结果，但是这样也让它变为了同步操作，但是一般不推荐这么做！可以采用为其添加回调函数的形式。这个回调函数会在 Producer 收到 ack 时调用，此处就和acks参数配置[1、0、-1]密切相关了。设置acks = all，acks是Producer的一个参数，代表了你对已提交消息的定义，如果设置成all，则表明所有副本Broker都要接收到消息，该消息才算是已提交。 如果消息发送失败的话，我们检查失败的原因之后重新发送即可！另外这里推荐为 Producer 的 retries （重试次数），设置一个比较合理的值，一般是 3 ，但是为了保证消息不丢失的话一般会设置比较大一点。设置完成之后，当出现网络问题之后能够自动重试消息发送，避免消息丢失。另外，建议还要设置重试间隔 retry.backoff.ms ，默认是100ms，可以设置到1秒左右，因为间隔太小的话重试的效果就不明显了，网络波动一次，你3次一下子就重试完了。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E9%AB%98%E6%80%A7%E8%83%BD/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"消息队列常见问题和解决方案"}],["meta",{"property":"og:description","content":"Kafka 不丢失 生产者端 生产者丢失消息是最复杂的情形了。生产者(Producer) 使用 send 方法发送消息实际上是异步的操作，我们可以通过 get()方法获取调用结果，但是这样也让它变为了同步操作，但是一般不推荐这么做！可以采用为其添加回调函数的形式。这个回调函数会在 Producer 收到 ack 时调用，此处就和acks参数配置[1、0、-1]密切相关了。设置acks = all，acks是Producer的一个参数，代表了你对已提交消息的定义，如果设置成all，则表明所有副本Broker都要接收到消息，该消息才算是已提交。 如果消息发送失败的话，我们检查失败的原因之后重新发送即可！另外这里推荐为 Producer 的 retries （重试次数），设置一个比较合理的值，一般是 3 ，但是为了保证消息不丢失的话一般会设置比较大一点。设置完成之后，当出现网络问题之后能够自动重试消息发送，避免消息丢失。另外，建议还要设置重试间隔 retry.backoff.ms ，默认是100ms，可以设置到1秒左右，因为间隔太小的话重试的效果就不明显了，网络波动一次，你3次一下子就重试完了。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-09T11:13:17.000Z"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-01-09T11:13:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息队列常见问题和解决方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-09T11:13:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Kafka","slug":"kafka","link":"#kafka","children":[{"level":3,"title":"不丢失","slug":"不丢失","link":"#不丢失","children":[]},{"level":3,"title":"不重复","slug":"不重复","link":"#不重复","children":[]},{"level":3,"title":"顺序性","slug":"顺序性","link":"#顺序性","children":[]}]},{"level":2,"title":"通用处理方案","slug":"通用处理方案","link":"#通用处理方案","children":[{"level":3,"title":"不重复","slug":"不重复-1","link":"#不重复-1","children":[]}]}],"git":{"createdTime":1703587259000,"updatedTime":1704798797000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":3}]},"readingTime":{"minutes":5.93,"words":1779},"filePathRelative":"home/高性能/消息队列常见问题和解决方案.md","localizedDate":"2023年12月26日","excerpt":"<h2> Kafka</h2>\\n<h3> 不丢失</h3>\\n<h4> 生产者端</h4>\\n<ul>\\n<li>\\n<p>生产者丢失消息是最复杂的情形了。生产者(Producer) 使用 send 方法发送消息实际上是异步的操作，我们可以通过 get()方法获取调用结果，但是这样也让它变为了同步操作，但是一般不推荐这么做！可以采用为其<mark>添加回调函数</mark>的形式。这个回调函数会在 Producer 收到 ack 时调用，此处就和acks参数配置[1、0、-1]密切相关了。设置acks = all，acks是Producer的一个参数，代表了你对已提交消息的定义，如果设置成all，则表明所有副本Broker都要接收到消息，该消息才算是已提交。</p>\\n</li>\\n<li>\\n<p>如果消息发送失败的话，我们检查失败的原因之后重新发送即可！另外这里推荐为 Producer 的 <mark>retries</mark> （重试次数），设置一个比较合理的值，一般是 3 ，但是为了保证消息不丢失的话一般会设置比较大一点。设置完成之后，当出现网络问题之后能够自动重试消息发送，避免消息丢失。另外，建议还要设置重试间隔 <mark>retry.backoff.ms</mark> ，默认是100ms，可以设置到1秒左右，因为间隔太小的话重试的效果就不明显了，网络波动一次，你3次一下子就重试完了。</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
