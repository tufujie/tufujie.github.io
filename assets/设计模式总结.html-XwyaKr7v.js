const e=JSON.parse('{"key":"v-6c7d956e","path":"/home/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93.html","title":"设计模式总结","lang":"zh-CN","frontmatter":{"title":"设计模式总结","description":"概述 设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。 拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。 应用场景 1.单例模式：应用场景为需要确保一个类只有一个实例的地方。 2.工厂方法模式：应用场景为需要创建对象的地方，但需要根据不同情况创建不同类型的对象。 3.抽象工厂模式：应用场景为需要创建一系列相关对象的地方。 4.生成器模式：应用场景为需要生成复杂对象的地方，可以通过生成器来逐步创建对象。 5.原型模式：应用场景为需要复制对象的地方，可以通过克隆来创建对象。 6.组合模式：应用场景为需要将对象组合成树形结构的地方。 7.装饰器模式：应用场景为需要动态地给对象添加职责的地方。 8.代理模式：应用场景为需要控制对对象的访问的地方。 9.观察者模式：应用场景为需要实现发布-订阅模型的地方。 10.中介者模式：应用场景为需要简化复杂系统中的对象之间的交互关系的地方。 11.策略模式：应用场景为需要实现多种算法的地方。 12.状态模式：应用场景为需要表示一个对象的状态的地方。 13.职责链模式：应用场景为需要将请求从一个对象传递到另一个对象的地方。 14.解释器模式：应用场景为需要定义语言的语法规则的地方。 15.迭代器模式：应用场景为需要遍历集合的地方。 16.组合模式：应用场景为需要将对象组合成树形结构的地方。 17.桥接模式：应用场景为需要将两个不相关的类一起使用的地方。 18.装饰器模式：应用场景为需要动态地给对象添加职责的地方。 19.外观模式：应用场景为需要简化子系统之间交互的地方。 20.享元模式：应用场景为需要共享对象的地方。 21.工厂方法模式：应用场景为需要创建对象，但需要根据不同情况创建不同类型的对象的地方。 22.抽象工厂模式：应用场景为需要创建一系列相关对象的地方。 23.装饰器模式：应用场景为需要动态地给对象添加职责的地方。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"设计模式总结"}],["meta",{"property":"og:description","content":"概述 设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。 拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。 应用场景 1.单例模式：应用场景为需要确保一个类只有一个实例的地方。 2.工厂方法模式：应用场景为需要创建对象的地方，但需要根据不同情况创建不同类型的对象。 3.抽象工厂模式：应用场景为需要创建一系列相关对象的地方。 4.生成器模式：应用场景为需要生成复杂对象的地方，可以通过生成器来逐步创建对象。 5.原型模式：应用场景为需要复制对象的地方，可以通过克隆来创建对象。 6.组合模式：应用场景为需要将对象组合成树形结构的地方。 7.装饰器模式：应用场景为需要动态地给对象添加职责的地方。 8.代理模式：应用场景为需要控制对对象的访问的地方。 9.观察者模式：应用场景为需要实现发布-订阅模型的地方。 10.中介者模式：应用场景为需要简化复杂系统中的对象之间的交互关系的地方。 11.策略模式：应用场景为需要实现多种算法的地方。 12.状态模式：应用场景为需要表示一个对象的状态的地方。 13.职责链模式：应用场景为需要将请求从一个对象传递到另一个对象的地方。 14.解释器模式：应用场景为需要定义语言的语法规则的地方。 15.迭代器模式：应用场景为需要遍历集合的地方。 16.组合模式：应用场景为需要将对象组合成树形结构的地方。 17.桥接模式：应用场景为需要将两个不相关的类一起使用的地方。 18.装饰器模式：应用场景为需要动态地给对象添加职责的地方。 19.外观模式：应用场景为需要简化子系统之间交互的地方。 20.享元模式：应用场景为需要共享对象的地方。 21.工厂方法模式：应用场景为需要创建对象，但需要根据不同情况创建不同类型的对象的地方。 22.抽象工厂模式：应用场景为需要创建一系列相关对象的地方。 23.装饰器模式：应用场景为需要动态地给对象添加职责的地方。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-02T09:17:20.000Z"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-02-02T09:17:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-02T09:17:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"创建型","slug":"创建型","link":"#创建型","children":[{"level":3,"title":"单例（Singleton）","slug":"单例-singleton","link":"#单例-singleton","children":[]},{"level":3,"title":"简单工厂（Simple Factory）","slug":"简单工厂-simple-factory","link":"#简单工厂-simple-factory","children":[]},{"level":3,"title":"工厂方法（Factory Method）","slug":"工厂方法-factory-method","link":"#工厂方法-factory-method","children":[]},{"level":3,"title":"抽象工厂（Abstract Factory）","slug":"抽象工厂-abstract-factory","link":"#抽象工厂-abstract-factory","children":[]},{"level":3,"title":"建造者（Builder）","slug":"建造者-builder","link":"#建造者-builder","children":[]},{"level":3,"title":"原型模式（Prototype）","slug":"原型模式-prototype","link":"#原型模式-prototype","children":[]}]},{"level":2,"title":"结构型","slug":"结构型","link":"#结构型","children":[{"level":3,"title":"适配器（Adapter）","slug":"适配器-adapter","link":"#适配器-adapter","children":[]},{"level":3,"title":"桥接（Bridge）","slug":"桥接-bridge","link":"#桥接-bridge","children":[]},{"level":3,"title":"组合（Composite）","slug":"组合-composite","link":"#组合-composite","children":[]},{"level":3,"title":"装饰（Decorator）","slug":"装饰-decorator","link":"#装饰-decorator","children":[]},{"level":3,"title":"外观（Facade）","slug":"外观-facade","link":"#外观-facade","children":[]},{"level":3,"title":"享元（Flyweight）","slug":"享元-flyweight","link":"#享元-flyweight","children":[]},{"level":3,"title":"代理（Proxy）","slug":"代理-proxy","link":"#代理-proxy","children":[]}]},{"level":2,"title":"行为型","slug":"行为型","link":"#行为型","children":[{"level":3,"title":"责任链（Chain Of Responsibility）","slug":"责任链-chain-of-responsibility","link":"#责任链-chain-of-responsibility","children":[]},{"level":3,"title":"命令（Command）","slug":"命令-command","link":"#命令-command","children":[]},{"level":3,"title":"解释器（Interpreter）","slug":"解释器-interpreter","link":"#解释器-interpreter","children":[]},{"level":3,"title":"迭代器（Iterator）","slug":"迭代器-iterator","link":"#迭代器-iterator","children":[]},{"level":3,"title":"中介者（Mediator）","slug":"中介者-mediator","link":"#中介者-mediator","children":[]},{"level":3,"title":"备忘录（Memento）","slug":"备忘录-memento","link":"#备忘录-memento","children":[]},{"level":3,"title":"观察者（Observer）","slug":"观察者-observer","link":"#观察者-observer","children":[]},{"level":3,"title":"状态（State）","slug":"状态-state","link":"#状态-state","children":[]},{"level":3,"title":"策略（Strategy）","slug":"策略-strategy","link":"#策略-strategy","children":[]},{"level":3,"title":"模板方法（Template Method）","slug":"模板方法-template-method","link":"#模板方法-template-method","children":[]},{"level":3,"title":"访问者（Visitor）","slug":"访问者-visitor","link":"#访问者-visitor","children":[]},{"level":3,"title":"空对象（Null）","slug":"空对象-null","link":"#空对象-null","children":[]}]}],"git":{"createdTime":1706186859000,"updatedTime":1706865440000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":2}]},"readingTime":{"minutes":35.02,"words":10506},"filePathRelative":"home/设计模式/设计模式总结.md","localizedDate":"2024年1月25日","excerpt":"<h2> 概述</h2>\\n<p>设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。\\n拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。\\n应用场景\\n1.单例模式：应用场景为需要确保一个类只有<strong>一个实例</strong>的地方。\\n2.工厂方法模式：应用场景为需要创建对象的地方，但需要<strong>根据不同情况创建不同类型的对象</strong>。\\n3.抽象工厂模式：应用场景为需要<strong>创建一系列相关对象</strong>的地方。\\n4.生成器模式：应用场景为需要<strong>生成复杂对象</strong>的地方，可以通过生成器来逐步创建对象。\\n5.原型模式：应用场景为需要<strong>复制对象</strong>的地方，可以通过克隆来创建对象。\\n6.组合模式：应用场景为需要将对象组合成树形结构的地方。\\n7.装饰器模式：应用场景为需要动态地给对象添加职责的地方。\\n8.代理模式：应用场景为需要控制对对象的访问的地方。\\n9.观察者模式：应用场景为需要实现发布-订阅模型的地方。\\n10.中介者模式：应用场景为需要简化复杂系统中的对象之间的交互关系的地方。\\n11.策略模式：应用场景为需要实现多种算法的地方。\\n12.状态模式：应用场景为需要表示一个对象的状态的地方。\\n13.职责链模式：应用场景为需要将请求从一个对象传递到另一个对象的地方。\\n14.解释器模式：应用场景为需要定义语言的语法规则的地方。\\n15.迭代器模式：应用场景为需要遍历集合的地方。\\n16.组合模式：应用场景为需要将对象组合成树形结构的地方。\\n17.桥接模式：应用场景为需要将两个不相关的类一起使用的地方。\\n18.装饰器模式：应用场景为需要动态地给对象添加职责的地方。\\n19.外观模式：应用场景为需要简化子系统之间交互的地方。\\n20.享元模式：应用场景为需要共享对象的地方。\\n21.工厂方法模式：应用场景为需要创建对象，但需要根据不同情况创建不同类型的对象的地方。\\n22.抽象工厂模式：应用场景为需要创建一系列相关对象的地方。\\n23.装饰器模式：应用场景为需要动态地给对象添加职责的地方。</p>","autoDesc":true}');export{e as data};
