import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as p,c as i,d as r}from"./app-AuAuVshg.js";const l="/assets/SkyWalking响应总耗时-CqD9TLRM.png",o={},e=r('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p><strong>说明</strong></p><p>本文介绍Java后端接口响应慢的排查的方法以及如何解决。</p><p><strong>如何发现接口响应慢了？</strong></p><p>一般通过如下方式发现接口响应慢</p><ol><li><p>监控系统的报警（例如：SkyWalking）</p></li><li><p>用户反馈</p></li></ol><p><strong>排查方向</strong></p><p>后端接口响应慢分以下2种情况：</p><ol><li><p>个别接口响应慢</p><ol><li>本文只探讨这种情况：排查个别接口响应慢的方法。</li></ol></li><li><p>所有接口响应慢</p><ol><li>可能是服务器问题，需要排查<mark>网络、CPU使用率、内存使用率、磁盘使用率</mark>等。见：Java线上问题排查--系统问题排查的方法/步骤</li></ol></li></ol><p>定位问题的方法</p><p><strong>法1：链路追踪工具（推荐）</strong></p><p>推荐<mark>使用SkyWalking</mark>。它会展示出每一个与网络有关的耗时，比如：读写数据库、读写Redis、SpringCloud调用、Dubbo调用等。这样就能立马定位是哪次操作耗时了。</p><p>同时，SkyWalking可以记录每一个SQL语句，可以帮助定位。</p><p>例如：（如箭头所指处，最上边一个是总耗时，下边的线段是单个操作的耗时）</p><figure><img src="'+l+'" alt="IMG_256" tabindex="0" loading="lazy"><figcaption>IMG_256</figcaption></figure><p><strong>法2：看代码猜问题点</strong></p><p>如果没有链路追踪工具，只能猜测是哪个地方出问题了，到代码中去追踪。</p><p>猜测方向：响应慢很大可能是操作<mark>数据库耗时比较长</mark>。</p><p><strong>法3：在链路上打印日志（最不推荐）</strong></p><p>在相应的链路上打印日志，然后查看日志，看是哪个地方耗时。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><h3 id="数据库耗时长" tabindex="-1"><a class="header-anchor" href="#数据库耗时长" aria-hidden="true">#</a> 数据库耗时长</h3><ol><li><p>必要字段加索引</p></li><li><p>确定是否索引失效了</p></li><li><p>如果有回表查询，尽量优化为覆盖索引</p></li></ol><p>相关网址：</p><p>MySQL索引系列--索引的优点/缺点/创建索引的原则</p><p>MySQL索引系列--索引失效的原因/解决方案</p><h3 id="架构不合理" tabindex="-1"><a class="header-anchor" href="#架构不合理" aria-hidden="true">#</a> 架构不合理</h3><p>目前很多项目都是微服务了，在拆分微服务时就必须要注意：</p><ol><li><p>关联性很强的服务，尽量将它们放到同一个微服务。</p><ol><li>比如：订单微服务和库存微服务。</li></ol></li><li><p>每次访问都要用到的功能，尽量不要作为一个服务，这样每次都要有网络损耗</p><ol><li><p>比如：验证用户的token是否有效。</p><ol><li><p>这个功能基本每个接口都会用到，最好是将其写到公共代码中，直接作为依赖进行打包。</p></li><li><p>用户其他的功能，比如：注册、登录、用户管理等，可以单独写一个微服务。</p></li></ol></li></ol></li></ol><h3 id="业务逻辑" tabindex="-1"><a class="header-anchor" href="#业务逻辑" aria-hidden="true">#</a> 业务逻辑</h3><p>这个就要具体情况具体分析了。</p><p>可以从如下两个方面解决：</p><ol><li><p><mark>写代码要思路清晰</mark>，尽量复杂问题简单化，同时考虑效率问题。</p></li><li><p>加强<mark>代码评审</mark>。代码评审要来真格的，我去过的大厂是这么搞的，很有借鉴意义：</p><ol><li><p>搞一个代码评审平台（类似jira等），让所有人都可以参与到评审</p></li><li><p>将评审的别人的bug数和自己的bug数作为一项<mark>绩效考核</mark>，但<mark>占比尽量小</mark>一些</p></li></ol></li></ol><h3 id="java死锁" tabindex="-1"><a class="header-anchor" href="#java死锁" aria-hidden="true">#</a> Java死锁</h3><p><strong>简介</strong></p><p>有三种方法可排查死锁：jps+jstack、jconsole、jvisualvm</p><p><strong>法1：jps+jstack</strong></p><p><strong>法2：jconsole</strong></p><p><strong>法3：jvisualvm</strong></p><h3 id="数据库死锁" tabindex="-1"><a class="header-anchor" href="#数据库死锁" aria-hidden="true">#</a> 数据库死锁</h3><p>一般通过可视化页面查看。比如：druid的页面。</p>',41),n=[e];function t(s,d){return p(),i("div",null,n)}const _=a(o,[["render",t],["__file","Java后端接口响应慢的排查方法及解决方案.html.vue"]]);export{_ as default};
