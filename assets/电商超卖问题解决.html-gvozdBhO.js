const n=JSON.parse('{"key":"v-2643a005","path":"/home/%E5%88%86%E5%B8%83%E5%BC%8F/%E7%94%B5%E5%95%86%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html","title":"电商超卖问题解决","lang":"zh-CN","frontmatter":{"title":"电商超卖问题解决","description":"// 总库存数量 private Integer PRODUCT_COUNT = 2; /** * 错误案例一：数据库update相互覆盖 * 直接在内存中判断是否有库存，计算扣减之后的值更新数据库，并发的情况下会导致相互覆盖发生： * * @param purchaseProductId 购买的商品id * @param purchaseProductNum 购买数量 * @return * @throws Exception */ public Long createOrderErrorV1(Long purchaseProductId, Integer purchaseProductNum, Long userId) throws Exception { // Product product = productMapper.selectByPrimaryKey(purchaseProductId); Product product = new Product(purchaseProductId, PRODUCT_COUNT); // ... 忽略校验逻辑 // 商品当前库存 Integer currentCount = product.getCount(); // 校验库存 if (purchaseProductNum &gt; currentCount) { throw new Exception(\\"当前用户\\" + userId + \\"商品\\" + purchaseProductId + \\"仅剩\\" + currentCount + \\"件，无法购买\\"); } // 计算剩余库存 Integer leftCount = currentCount - purchaseProductNum; // 更新库存 product.setCount(leftCount); product.setGmtModified(new Date()); // 更新库存数量 // productMapper.updateByPrimaryKeySelective(product); PRODUCT_COUNT = product.getCount(); OrderInfo order = new OrderInfo(); // ... 省略 Set // orderMapper.insertSelective(order); System.out.println(\\"当前用户\\" + userId + \\"成功创建商品\\" + purchaseProductId + \\"的订单\\"); OrderProduct orderItem = new OrderProduct(); orderItem.setOrderId(order.getId()); // ... 省略 Set return order.getId(); } /** * 错误案例二：扣减串行执行，但是库存被扣减为负数 * 在 SQL 中加入运算避免值的相互覆盖，但是库存的数量变为负数，因为校验库存是否足够还是在内存中执行的，并发情况下都会读到有库存： * * @param purchaseProductId 购买的商品id * @param purchaseProductNum 购买数量 * @return * @throws Exception */ public Long createOrderErrorV2(Long purchaseProductId, Integer purchaseProductNum, Long userId) throws Exception { // Product product = productMapper.selectByPrimaryKey(purchaseProductId); Product product = new Product(purchaseProductId, PRODUCT_COUNT); // ... 忽略校验逻辑 // 商品当前库存 Integer currentCount = product.getCount(); // 校验库存 if (purchaseProductNum &gt; currentCount) { throw new Exception(\\"当前用户\\" + userId + \\"商品\\" + purchaseProductId + \\"仅剩\\" + currentCount + \\"件，无法购买\\"); } // 更新库存数量 // 使用 set count = count - #{purchaseProductNum,jdbcType=INTEGER}, 更新库存 // productMapper.updateProductCount(purchaseProductNum, new Date(), product.getId()); PRODUCT_COUNT = product.getCount() - purchaseProductNum; OrderInfo order = new OrderInfo(); // ... 省略 Set // orderMapper.insertSelective(order); System.out.println(\\"当前用户\\" + userId + \\"成功创建商品\\" + purchaseProductId + \\"的订单\\"); OrderProduct orderItem = new OrderProduct(); orderItem.setOrderId(order.getId()); // ... 省略 Set return order.getId(); } /** * 错误案例三：使用 synchronized 实现内存中串行校验，但是依旧扣减为负数 * 因为我们使用的是事务的注解，synchronized加在方法上，方法执行结束的时候锁就会释放，此时的事务还没有提交， * 另一个线程拿到这把锁之后获取的可能是旧库存数，就会有一次扣减，导致负数。 * * @param purchaseProductId 购买的商品id * @param purchaseProductNum 购买数量 * @return * @throws Exception */ // @Transactional(rollbackFor = Exception.class) public synchronized Long createOrderErrorV3(Long purchaseProductId, Integer purchaseProductNum, Long userId) throws Exception { // Product product = productMapper.selectByPrimaryKey(purchaseProductId); Product product = new Product(purchaseProductId, PRODUCT_COUNT); // ... 忽略校验逻辑 // 商品当前库存 Integer currentCount = product.getCount(); // 校验库存 if (purchaseProductNum &gt; currentCount) { throw new Exception(\\"当前用户\\" + userId + \\"商品\\" + purchaseProductId + \\"仅剩\\" + currentCount + \\"件，无法购买\\"); } // 更新库存数量 // 使用 set count = count - #{purchaseProductNum,jdbcType=INTEGER}, 更新库存 // productMapper.updateProductCount(purchaseProductNum, new Date(), product.getId()); PRODUCT_COUNT = product.getCount() - purchaseProductNum; OrderInfo order = new OrderInfo(); // ... 省略 Set // orderMapper.insertSelective(order); System.out.println(\\"当前用户\\" + userId + \\"成功创建商品\\" + purchaseProductId + \\"的订单\\"); OrderProduct orderItem = new OrderProduct(); orderItem.setOrderId(order.getId()); // ... 省略 Set return order.getId(); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E5%88%86%E5%B8%83%E5%BC%8F/%E7%94%B5%E5%95%86%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"电商超卖问题解决"}],["meta",{"property":"og:description","content":"// 总库存数量 private Integer PRODUCT_COUNT = 2; /** * 错误案例一：数据库update相互覆盖 * 直接在内存中判断是否有库存，计算扣减之后的值更新数据库，并发的情况下会导致相互覆盖发生： * * @param purchaseProductId 购买的商品id * @param purchaseProductNum 购买数量 * @return * @throws Exception */ public Long createOrderErrorV1(Long purchaseProductId, Integer purchaseProductNum, Long userId) throws Exception { // Product product = productMapper.selectByPrimaryKey(purchaseProductId); Product product = new Product(purchaseProductId, PRODUCT_COUNT); // ... 忽略校验逻辑 // 商品当前库存 Integer currentCount = product.getCount(); // 校验库存 if (purchaseProductNum &gt; currentCount) { throw new Exception(\\"当前用户\\" + userId + \\"商品\\" + purchaseProductId + \\"仅剩\\" + currentCount + \\"件，无法购买\\"); } // 计算剩余库存 Integer leftCount = currentCount - purchaseProductNum; // 更新库存 product.setCount(leftCount); product.setGmtModified(new Date()); // 更新库存数量 // productMapper.updateByPrimaryKeySelective(product); PRODUCT_COUNT = product.getCount(); OrderInfo order = new OrderInfo(); // ... 省略 Set // orderMapper.insertSelective(order); System.out.println(\\"当前用户\\" + userId + \\"成功创建商品\\" + purchaseProductId + \\"的订单\\"); OrderProduct orderItem = new OrderProduct(); orderItem.setOrderId(order.getId()); // ... 省略 Set return order.getId(); } /** * 错误案例二：扣减串行执行，但是库存被扣减为负数 * 在 SQL 中加入运算避免值的相互覆盖，但是库存的数量变为负数，因为校验库存是否足够还是在内存中执行的，并发情况下都会读到有库存： * * @param purchaseProductId 购买的商品id * @param purchaseProductNum 购买数量 * @return * @throws Exception */ public Long createOrderErrorV2(Long purchaseProductId, Integer purchaseProductNum, Long userId) throws Exception { // Product product = productMapper.selectByPrimaryKey(purchaseProductId); Product product = new Product(purchaseProductId, PRODUCT_COUNT); // ... 忽略校验逻辑 // 商品当前库存 Integer currentCount = product.getCount(); // 校验库存 if (purchaseProductNum &gt; currentCount) { throw new Exception(\\"当前用户\\" + userId + \\"商品\\" + purchaseProductId + \\"仅剩\\" + currentCount + \\"件，无法购买\\"); } // 更新库存数量 // 使用 set count = count - #{purchaseProductNum,jdbcType=INTEGER}, 更新库存 // productMapper.updateProductCount(purchaseProductNum, new Date(), product.getId()); PRODUCT_COUNT = product.getCount() - purchaseProductNum; OrderInfo order = new OrderInfo(); // ... 省略 Set // orderMapper.insertSelective(order); System.out.println(\\"当前用户\\" + userId + \\"成功创建商品\\" + purchaseProductId + \\"的订单\\"); OrderProduct orderItem = new OrderProduct(); orderItem.setOrderId(order.getId()); // ... 省略 Set return order.getId(); } /** * 错误案例三：使用 synchronized 实现内存中串行校验，但是依旧扣减为负数 * 因为我们使用的是事务的注解，synchronized加在方法上，方法执行结束的时候锁就会释放，此时的事务还没有提交， * 另一个线程拿到这把锁之后获取的可能是旧库存数，就会有一次扣减，导致负数。 * * @param purchaseProductId 购买的商品id * @param purchaseProductNum 购买数量 * @return * @throws Exception */ // @Transactional(rollbackFor = Exception.class) public synchronized Long createOrderErrorV3(Long purchaseProductId, Integer purchaseProductNum, Long userId) throws Exception { // Product product = productMapper.selectByPrimaryKey(purchaseProductId); Product product = new Product(purchaseProductId, PRODUCT_COUNT); // ... 忽略校验逻辑 // 商品当前库存 Integer currentCount = product.getCount(); // 校验库存 if (purchaseProductNum &gt; currentCount) { throw new Exception(\\"当前用户\\" + userId + \\"商品\\" + purchaseProductId + \\"仅剩\\" + currentCount + \\"件，无法购买\\"); } // 更新库存数量 // 使用 set count = count - #{purchaseProductNum,jdbcType=INTEGER}, 更新库存 // productMapper.updateProductCount(purchaseProductNum, new Date(), product.getId()); PRODUCT_COUNT = product.getCount() - purchaseProductNum; OrderInfo order = new OrderInfo(); // ... 省略 Set // orderMapper.insertSelective(order); System.out.println(\\"当前用户\\" + userId + \\"成功创建商品\\" + purchaseProductId + \\"的订单\\"); OrderProduct orderItem = new OrderProduct(); orderItem.setOrderId(order.getId()); // ... 省略 Set return order.getId(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-07T07:59:36.000Z"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-02-07T07:59:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"电商超卖问题解决\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-07T07:59:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"单体应用：正确示例：将事务包含在锁的控制范围内","slug":"单体应用-正确示例-将事务包含在锁的控制范围内","link":"#单体应用-正确示例-将事务包含在锁的控制范围内","children":[]},{"level":2,"title":"单体应用：正确示例：使用synchronized的代码块","slug":"单体应用-正确示例-使用synchronized的代码块","link":"#单体应用-正确示例-使用synchronized的代码块","children":[]},{"level":2,"title":"单体应用：正确示例：使用Lock","slug":"单体应用-正确示例-使用lock","link":"#单体应用-正确示例-使用lock","children":[]},{"level":2,"title":"分布式应用：正确案例一：Redis setNx","slug":"分布式应用-正确案例一-redis-setnx","link":"#分布式应用-正确案例一-redis-setnx","children":[]},{"level":2,"title":"其他分布式锁应用","slug":"其他分布式锁应用","link":"#其他分布式锁应用","children":[]}],"git":{"createdTime":1706347936000,"updatedTime":1707292776000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":2}]},"readingTime":{"minutes":5.35,"words":1605},"filePathRelative":"home/分布式/电商超卖问题解决.md","localizedDate":"2024年1月27日","excerpt":"<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 总库存数量</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Integer</span> <span class=\\"token constant\\">PRODUCT_COUNT</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 错误案例一：数据库update相互覆盖\\n     * 直接在内存中判断是否有库存，计算扣减之后的值更新数据库，并发的情况下会导致相互覆盖发生：\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">purchaseProductId</span>  购买的商品id\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">purchaseProductNum</span> 购买数量\\n     * <span class=\\"token keyword\\">@return</span>\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Exception</span></span>\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Long</span> <span class=\\"token function\\">createOrderErrorV1</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Long</span> purchaseProductId<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span> purchaseProductNum<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Long</span> userId<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        Product product = productMapper.selectByPrimaryKey(purchaseProductId);</span>\\n        <span class=\\"token class-name\\">Product</span> product <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Product</span><span class=\\"token punctuation\\">(</span>purchaseProductId<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">PRODUCT_COUNT</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... 忽略校验逻辑</span>\\n\\n        <span class=\\"token comment\\">// 商品当前库存</span>\\n        <span class=\\"token class-name\\">Integer</span> currentCount <span class=\\"token operator\\">=</span> product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 校验库存</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>purchaseProductNum <span class=\\"token operator\\">&gt;</span> currentCount<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Exception</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"当前用户\\"</span> <span class=\\"token operator\\">+</span> userId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"商品\\"</span> <span class=\\"token operator\\">+</span> purchaseProductId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"仅剩\\"</span> <span class=\\"token operator\\">+</span> currentCount <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"件，无法购买\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 计算剩余库存</span>\\n        <span class=\\"token class-name\\">Integer</span> leftCount <span class=\\"token operator\\">=</span> currentCount <span class=\\"token operator\\">-</span> purchaseProductNum<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 更新库存</span>\\n        product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setCount</span><span class=\\"token punctuation\\">(</span>leftCount<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setGmtModified</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 更新库存数量</span>\\n<span class=\\"token comment\\">//        productMapper.updateByPrimaryKeySelective(product);</span>\\n        <span class=\\"token constant\\">PRODUCT_COUNT</span> <span class=\\"token operator\\">=</span> product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">OrderInfo</span> order <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">OrderInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... 省略 Set</span>\\n<span class=\\"token comment\\">//        orderMapper.insertSelective(order);</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"当前用户\\"</span> <span class=\\"token operator\\">+</span> userId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"成功创建商品\\"</span> <span class=\\"token operator\\">+</span> purchaseProductId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"的订单\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">OrderProduct</span> orderItem <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">OrderProduct</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        orderItem<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setOrderId</span><span class=\\"token punctuation\\">(</span>order<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... 省略 Set</span>\\n        <span class=\\"token keyword\\">return</span> order<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 错误案例二：扣减串行执行，但是库存被扣减为负数\\n     * 在 SQL 中加入运算避免值的相互覆盖，但是库存的数量变为负数，因为校验库存是否足够还是在内存中执行的，并发情况下都会读到有库存：\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">purchaseProductId</span>  购买的商品id\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">purchaseProductNum</span> 购买数量\\n     * <span class=\\"token keyword\\">@return</span>\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Exception</span></span>\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Long</span> <span class=\\"token function\\">createOrderErrorV2</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Long</span> purchaseProductId<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span> purchaseProductNum<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Long</span> userId<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        Product product = productMapper.selectByPrimaryKey(purchaseProductId);</span>\\n        <span class=\\"token class-name\\">Product</span> product <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Product</span><span class=\\"token punctuation\\">(</span>purchaseProductId<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">PRODUCT_COUNT</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... 忽略校验逻辑</span>\\n\\n        <span class=\\"token comment\\">// 商品当前库存</span>\\n        <span class=\\"token class-name\\">Integer</span> currentCount <span class=\\"token operator\\">=</span> product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 校验库存</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>purchaseProductNum <span class=\\"token operator\\">&gt;</span> currentCount<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Exception</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"当前用户\\"</span> <span class=\\"token operator\\">+</span> userId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"商品\\"</span> <span class=\\"token operator\\">+</span> purchaseProductId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"仅剩\\"</span> <span class=\\"token operator\\">+</span> currentCount <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"件，无法购买\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 更新库存数量</span>\\n        <span class=\\"token comment\\">// 使用 set count =  count - #{purchaseProductNum,jdbcType=INTEGER}, 更新库存</span>\\n<span class=\\"token comment\\">//        productMapper.updateProductCount(purchaseProductNum, new Date(), product.getId());</span>\\n        <span class=\\"token constant\\">PRODUCT_COUNT</span> <span class=\\"token operator\\">=</span> product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> purchaseProductNum<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">OrderInfo</span> order <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">OrderInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... 省略 Set</span>\\n<span class=\\"token comment\\">//        orderMapper.insertSelective(order);</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"当前用户\\"</span> <span class=\\"token operator\\">+</span> userId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"成功创建商品\\"</span> <span class=\\"token operator\\">+</span> purchaseProductId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"的订单\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">OrderProduct</span> orderItem <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">OrderProduct</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        orderItem<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setOrderId</span><span class=\\"token punctuation\\">(</span>order<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... 省略 Set</span>\\n        <span class=\\"token keyword\\">return</span> order<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 错误案例三：使用 synchronized 实现内存中串行校验，但是依旧扣减为负数\\n     * 因为我们使用的是事务的注解，synchronized加在方法上，方法执行结束的时候锁就会释放，此时的事务还没有提交，\\n     * 另一个线程拿到这把锁之后获取的可能是旧库存数，就会有一次扣减，导致负数。\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">purchaseProductId</span>  购买的商品id\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">purchaseProductNum</span> 购买数量\\n     * <span class=\\"token keyword\\">@return</span>\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Exception</span></span>\\n     */</span>\\n\\n<span class=\\"token comment\\">//    @Transactional(rollbackFor = Exception.class)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">synchronized</span> <span class=\\"token class-name\\">Long</span> <span class=\\"token function\\">createOrderErrorV3</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Long</span> purchaseProductId<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span> purchaseProductNum<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Long</span> userId<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        Product product = productMapper.selectByPrimaryKey(purchaseProductId);</span>\\n        <span class=\\"token class-name\\">Product</span> product <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Product</span><span class=\\"token punctuation\\">(</span>purchaseProductId<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">PRODUCT_COUNT</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... 忽略校验逻辑</span>\\n\\n        <span class=\\"token comment\\">// 商品当前库存</span>\\n        <span class=\\"token class-name\\">Integer</span> currentCount <span class=\\"token operator\\">=</span> product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 校验库存</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>purchaseProductNum <span class=\\"token operator\\">&gt;</span> currentCount<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Exception</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"当前用户\\"</span> <span class=\\"token operator\\">+</span> userId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"商品\\"</span> <span class=\\"token operator\\">+</span> purchaseProductId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"仅剩\\"</span> <span class=\\"token operator\\">+</span> currentCount <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"件，无法购买\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// 更新库存数量</span>\\n        <span class=\\"token comment\\">// 使用 set count =  count - #{purchaseProductNum,jdbcType=INTEGER}, 更新库存</span>\\n<span class=\\"token comment\\">//        productMapper.updateProductCount(purchaseProductNum, new Date(), product.getId());</span>\\n        <span class=\\"token constant\\">PRODUCT_COUNT</span> <span class=\\"token operator\\">=</span> product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> purchaseProductNum<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">OrderInfo</span> order <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">OrderInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... 省略 Set</span>\\n<span class=\\"token comment\\">//        orderMapper.insertSelective(order);</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"当前用户\\"</span> <span class=\\"token operator\\">+</span> userId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"成功创建商品\\"</span> <span class=\\"token operator\\">+</span> purchaseProductId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"的订单\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">OrderProduct</span> orderItem <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">OrderProduct</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        orderItem<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setOrderId</span><span class=\\"token punctuation\\">(</span>order<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... 省略 Set</span>\\n        <span class=\\"token keyword\\">return</span> order<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
