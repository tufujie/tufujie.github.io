const e=JSON.parse('{"key":"v-d1154d48","path":"/home/Java/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html","title":"类加载器","lang":"zh-CN","frontmatter":{"title":"类加载器","description":"一、类加载器相关概念 1.ClassLoader的作用 ClassLoader是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader负责通过各种方式将Class信息的二进制数据流读入JVM内部，转换为一个与目标类对应的java.lang.Class对象实例。然后交给Java虚拟机进行连接、初始化等操作。因此，ClassLoader在整个装载阶段，只能影响到类的加载，而无法通过ClassLoader去改变类的连接和初始化行为，至于它是否可以运行，则有Execution Engine决定。 2.类加载的分类","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/Java/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"类加载器"}],["meta",{"property":"og:description","content":"一、类加载器相关概念 1.ClassLoader的作用 ClassLoader是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader负责通过各种方式将Class信息的二进制数据流读入JVM内部，转换为一个与目标类对应的java.lang.Class对象实例。然后交给Java虚拟机进行连接、初始化等操作。因此，ClassLoader在整个装载阶段，只能影响到类的加载，而无法通过ClassLoader去改变类的连接和初始化行为，至于它是否可以运行，则有Execution Engine决定。 2.类加载的分类"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-24T12:59:29.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"类加载器"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-01-24T12:59:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类加载器\\",\\"image\\":[\\"https://mister-hope.github.io/\\"],\\"dateModified\\":\\"2024-01-24T12:59:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、类加载器相关概念","slug":"一、类加载器相关概念","link":"#一、类加载器相关概念","children":[{"level":3,"title":"1.ClassLoader的作用","slug":"_1-classloader的作用","link":"#_1-classloader的作用","children":[]},{"level":3,"title":"2.类加载的分类","slug":"_2-类加载的分类","link":"#_2-类加载的分类","children":[]},{"level":3,"title":"3.类加载器的必要性","slug":"_3-类加载器的必要性","link":"#_3-类加载器的必要性","children":[]},{"level":3,"title":"4.命名空间","slug":"_4-命名空间","link":"#_4-命名空间","children":[]},{"level":3,"title":"5.类加载机制的基本特征","slug":"_5-类加载机制的基本特征","link":"#_5-类加载机制的基本特征","children":[]}]},{"level":2,"title":"二、类加载器分类（Java8）","slug":"二、类加载器分类-java8","link":"#二、类加载器分类-java8","children":[{"level":3,"title":"1.启动类加载器","slug":"_1-启动类加载器","link":"#_1-启动类加载器","children":[]},{"level":3,"title":"2.扩展类加载器","slug":"_2-扩展类加载器","link":"#_2-扩展类加载器","children":[]},{"level":3,"title":"3.应用程序加载器","slug":"_3-应用程序加载器","link":"#_3-应用程序加载器","children":[]},{"level":3,"title":"4.数组的类加载器（补充）","slug":"_4-数组的类加载器-补充","link":"#_4-数组的类加载器-补充","children":[]}]},{"level":2,"title":"三、双亲委派机制","slug":"三、双亲委派机制","link":"#三、双亲委派机制","children":[{"level":3,"title":"1.定义与本质","slug":"_1-定义与本质","link":"#_1-定义与本质","children":[]},{"level":3,"title":"2.优势","slug":"_2-优势","link":"#_2-优势","children":[]}]},{"level":2,"title":"四、ClassLoader源码解析","slug":"四、classloader源码解析","link":"#四、classloader源码解析","children":[{"level":3,"title":"1.loaderClass","slug":"_1-loaderclass","link":"#_1-loaderclass","children":[]},{"level":3,"title":"2.findClass","slug":"_2-findclass","link":"#_2-findclass","children":[]},{"level":3,"title":"3.defineClass","slug":"_3-defineclass","link":"#_3-defineclass","children":[]},{"level":3,"title":"4.preDefineClass","slug":"_4-predefineclass","link":"#_4-predefineclass","children":[]}]},{"level":2,"title":"五、自定义类加载器","slug":"五、自定义类加载器","link":"#五、自定义类加载器","children":[]},{"level":2,"title":"六、Java9有关类加载器的变化","slug":"六、java9有关类加载器的变化","link":"#六、java9有关类加载器的变化","children":[]}],"git":{"createdTime":1706101169000,"updatedTime":1706101169000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":1}]},"readingTime":{"minutes":16.77,"words":5032},"filePathRelative":"home/Java/类加载器.md","localizedDate":"2024年1月24日","excerpt":"<h2> 一、类加载器相关概念</h2>\\n<h3> 1.ClassLoader的作用</h3>\\n<p>ClassLoader是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader负责通过各种方式将Class信息的二进制数据流读入JVM内部，转换为一个与目标类对应的java.lang.Class对象实例。然后交给Java虚拟机进行连接、初始化等操作。因此，ClassLoader在整个装载阶段，只能影响到类的加载，而无法通过ClassLoader去改变类的连接和初始化行为，至于它是否可以运行，则有Execution Engine决定。</p>\\n<h3> 2.类加载的分类</h3>","autoDesc":true}');export{e as data};
