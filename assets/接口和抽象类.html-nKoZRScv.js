import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as p,d as t}from"./app-AuAuVshg.js";const e={},c=t("<p><strong>抽象类（abstract class）和接口（interface）★★★</strong></p><ul><li><p>接口中所有的方法隐含都是抽象的。而抽象类则可以同时包含抽象（用于子类差异化实现）和非抽象（用于共用）的方法； 接口中定义的方法必须是不包含具体实现的（即隐式的抽象方法）；但抽象类中既可以定义抽象方法（不包含具体实现）又可以定义非抽象方法( 包含具体实现 )；</p></li><li><p>类可以不实现抽象类和接口声明的所有方法，但这种情况下，该类必须声明成抽象的；</p><ul><li>抽象类可以在不提供接口方法实现的情况下实现接口；</li></ul></li><li><p>类可以实现很多个接口，但是只能继承一个抽象类（单继承，多实现）；</p></li><li><p>抽象类中可以有构造函数，可以有main方法并可以运行，而接口中都不存在；</p></li><li><p>接口中声明的变量默认都是final的；但抽象类可以包含非final的变量；</p></li><li><p>接口中的成员方法默认都是public的；但抽象类中的成员函数可以是 private、protected、public；</p></li><li><p>接口是绝对抽象的，不可以被实例化；</p></li><li><p>JDK8及之后，接口中可以包含default方法，抽象类中不可以；</p></li></ul><p>抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。</p><p>接口用于规范，抽象类用于共性。</p><p>声明方法的存在而不去实现它的类被叫做抽象类。</p><p>接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。</p><p><strong>共同点 ：</strong></p><ul><li>都不能被实例化。</li><li>都可以包含抽象方法。</li><li>都可以有默认实现的方法（Java 8 可以用 default 关键字在接口中定义默认方法）。</li></ul><p><strong>区别 ：</strong></p><ul><li>接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系（比如说我们抽象了一个发送短信的抽象类）。</li><li>一个类只能继承一个类，但是可以实现多个接口。</li><li>接口中的成员变量只能是 public static final类型的，不能被修改且必须有初始值，而抽象类的成员变量默认default，可在子类中被重新定义，也可被重新赋值。</li></ul>",10),a=[c];function r(o,n){return i(),p("div",null,a)}const u=l(e,[["render",r],["__file","接口和抽象类.html.vue"]]);export{u as default};
