import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as i,d as h}from"./app-AuAuVshg.js";const e="/assets/一致性hash算法1-wFCrITwi.jpg",n="/assets/一致性hash算法2-8AyiyY7x.jpg",t="/assets/一致性hash算法3-YpSFzQLa.jpg",o="/assets/一致性hash算法4-mLJCiOXR.jpg",p="/assets/一致性hash算法5-UvT4Dg66.jpg",r="/assets/一致性hash算法6-goqdlEy6.jpg",g="/assets/一致性hash算法7-TDWHvHIq.jpg",d="/assets/一致性hash算法8-BnBtNEaB.jpg",l="/assets/一致性hash算法9-b4PsTbqM.jpg",c="/assets/一致性hash算法10-VzgBvQgz.jpg",f="/assets/一致性hash算法11-wuCJPQoJ.jpg",y="/assets/一致性hash算法12-KyXjWiab.jpg",u="/assets/一致性hash算法13-BRLxDC4_.jpg",_="/assets/一致性hash算法14-JFAMaI02.jpg",m={},k=h('<p>下边我们以分布式缓存中经典场景举例，看看什么是一致性hash算法以及它有那些过人之处。</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="构建场景" tabindex="-1"><a class="header-anchor" href="#构建场景" aria-hidden="true">#</a> <strong>构建场景</strong></h2><p>假如我们有三台缓存服务器编号node0、node1、node2，现在有3000万个key，希望可以将这些个key均匀的缓存到三台机器上，你会想到什么方案呢？</p><p>我们可能首先想到的方案，是取模算法hash（key）% N，对key进行hash运算后取模，N是机器的数量。key进行hash后的结果对3取模，得到的结果一定是0、1或者2，正好对应服务器node0、node1、node2，存取数据直接找对应的服务器即可，简单粗暴，完全可以解决上述的问题。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="hash的问题" tabindex="-1"><a class="header-anchor" href="#hash的问题" aria-hidden="true">#</a> <strong>hash的问题</strong></h2><p>取模算法虽然使用简单，但对机器数量取模，在集群扩容和收缩时却有一定的局限性，因为在生产环境中根据业务量的大小，调整服务器数量是常有的事；而服务器数量N发生变化后hash（key）% N计算的结果也会随之变化。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如：一个服务器节点挂了，计算公式从hash（key）% 3变成了hash（key）% 2，结果会发生变化，此时想要访问一个key，这个key的缓存位置大概率会发生改变，那么之前缓存key的数据也会失去作用与意义。</p><p>大量缓存在同一时间失效，造成缓存的雪崩，进而导致整个缓存系统的不可用，这基本上是不能接受的，为了解决优化上述情况，一致性hash算法应运而生~</p><p>那么，一致性哈希算法又是如何解决上述问题的？</p><h2 id="一致性hash" tabindex="-1"><a class="header-anchor" href="#一致性hash" aria-hidden="true">#</a> <strong>一致性hash</strong></h2><p>一致性hash算法<strong>本质上也是一种取模算法</strong>，不过，不同于上边按服务器数量取模，一致性hash是对固定值2^32取模。</p><p>IPv4的地址是4组8位2进制数组成，所以用2^32可以保证每个IP地址会有唯一的映射</p><p><strong>hash环</strong></p><p>我们可以将这<code>2^32</code>个值抽象成一个圆环⭕️，圆环的正上方的点代表0，顺时针排列，以此类推，1、2、3、4、5、6……直到2^32-1，而这个由2的32次方个点组成的圆环统称为hash环。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么这个hash环和一致性hash算法又有什么关系嘞？我们还是以上边的场景为例，三台缓存服务器编号node0、node1、node2，3000万个key。</p><p><strong>服务器映射到hash环</strong></p><p>这个时候计算公式就从<strong>hash（key）% N</strong> 变成了**hash（服务器ip）% 2<sup>32**，使用服务器IP地址进行hash计算，用哈希后的结果对`2^32`取模，结果一定是一个0到2</sup>32-1之间的整数，而这个整数映射在hash环上的位置代表了一个服务器，依次将node0、node1、node2三个缓存服务器映射到hash环上。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>对象key映射到hash环</strong></p><p>接着再将需要缓存的key对象也映射到hash环上，<strong>hash（key）% 2^32</strong>，服务器节点和要缓存的key对象都映射到了hash环，那对象key具体应该缓存到哪个服务器上呢？</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>对象key映射到服务器</strong></p><p><strong>从缓存对象key的位置开始，沿顺时针方向遇到的第一个服务器，便是当前对象将要缓存到的服务器</strong>。</p><p>因为被缓存对象与服务器hash后的值是固定的，所以，在服务器不变的条件下，对象key必定会被缓存到固定的服务器上。根据上边的规则，下图中的映射关系：</p><ul><li><p>key-1 -&gt; node-1</p></li><li><p>key-3 -&gt; node-2</p></li><li><p>key-4 -&gt; node-2</p></li><li><p>key-5 -&gt; node-2</p></li><li><p>key-2 -&gt; node-0</p></li></ul><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果想要访问某个key，只要使用相同的计算方式，即可得知这个key被缓存在哪个服务器上了。</p><h2 id="一致性hash的优势" tabindex="-1"><a class="header-anchor" href="#一致性hash的优势" aria-hidden="true">#</a> <strong>一致性hash的优势</strong></h2><p>我们简单了解了一致性hash的原理，那它又是如何优化集群中添加节点和缩减节点，普通取模算法导致的缓存服务，大面积不可用的问题呢？</p><p>先来看看扩容的场景，假如业务量激增，系统需要进行扩容增加一台服务器node-4，刚好node-4被映射到node-1和node-2之间，沿顺时针方向对象映射节点，发现原本缓存在node-2上的对象key-4、key-5被重新映射到了node-4上，而整个扩容过程中受影响的只有node-4和node-1节点之间的一小部分数据。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>反之，假如node-1节点宕机，沿顺时针方向对象映射节点，缓存在node-1上的对象key-1被重新映射到了node-4上，此时受影响的数据只有node-0和node-1之间的一小部分数据。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上边的两种情况发现，当集群中服务器的数量发生改变时，一致性hash算只会影响少部分的数据，保证了缓存系统整体还可以对外提供服务的。</p><h2 id="数据偏斜问题" tabindex="-1"><a class="header-anchor" href="#数据偏斜问题" aria-hidden="true">#</a> <strong>数据偏斜问题</strong></h2><p>前边为了便于理解原理，画图中的node节点都很理想化的相对均匀分布，但理想和实际的场景往往差别很大，就比如办了个健身年卡的我，只去过健身房两次，还只是洗了个澡。</p><p><img src="'+c+'" alt="" loading="lazy">想要健身的你</p><p>在服务器节点数量太少的情况下，很容易因为节点分布不均匀而造成<strong>数据倾斜</strong>问题，如下图被缓存的对象大部分缓存在node-4服务器上，导致其他节点资源浪费，系统压力大部分集中在node-4节点上，这样的集群是非常不健康的。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解决数据倾斜的办法也简单，我们就要想办法让节点映射到hash环上时，相对分布均匀一点。</p><p>一致性Hash算法引入了一个<strong>虚拟节点</strong>机制，即对每个服务器节点计算出多个hash值，它们都会映射到hash环上，映射到这些虚拟节点的对象key，最终会缓存在真实的节点上。</p><p>虚拟节点的hash计算通常可以采用，对应节点的IP地址加数字编号后缀 <strong>hash（10.24.23.227##1)</strong> 的方式，举个例子，node-1节点IP为10.24.23.227，正常计算node-1的hash值。</p><ul><li>hash（10.24.23.227##1）% 2^32</li></ul><p>假设我们给node-1设置三个虚拟节点，node-1##1、node-1##2、node-1##3，对它们进行hash后取模。</p><ul><li><p>hash（10.24.23.227##1）% 2^32</p></li><li><p>hash（10.24.23.227##2）% 2^32</p></li><li><p>hash（10.24.23.227##3）% 2^32</p></li></ul><p>下图加入虚拟节点后，原有节点在hash环上分布的就相对均匀了，其余节点压力得到了分摊。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但需要注意一点，分配的虚拟节点个数越多，映射在hash环上才会越趋于均匀，节点太少的话很难看出效果</p><p>引入虚拟节点的同时也增加了新的问题，要做虚拟节点和真实节点间的映射，对象key-&gt;虚拟节点-&gt;实际节点之间的转换。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一致性hash的应用场景" tabindex="-1"><a class="header-anchor" href="#一致性hash的应用场景" aria-hidden="true">#</a> <strong>一致性hash的应用场景</strong></h2><p>一致性hash在分布式系统中应该是实现负载均衡的首选算法，它的实现比较灵活，既可以在客户端实现，也可以在中间件上实现，比如日常使用较多的缓存中间件memcached和redis集群都有用到它。</p><p>memcached的集群比较特殊，严格来说它只能算是<strong>伪集群</strong>，因为它的服务器之间不能通信，请求的分发路由完全靠客户端来的计算出缓存对象应该落在哪个服务器上，而它的路由算法用的就是一致性hash。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还有redis集群中hash槽的概念，虽然实现不尽相同，但思想万变不离其宗，看完本篇的一致性hash，你再去理解redis槽位就轻松多了。</p><p>其它的应用场景还有很多：</p><ul><li><p>RPC框架Dubbo用来选择服务提供者</p></li><li><p>分布式关系数据库分库分表：数据与节点的映射关系</p></li><li><p>LVS负载均衡调度器</p></li><li><p>.....................</p></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h2><p>简单的阐述了下一致性hash，如果有不对的地方大家可以留言指正，任何技术都不会十全十美，一致性Hash算法也是有一些潜在隐患的，如果Hash环上的节点数量非常庞大或者更新频繁时，检索性能会比较低下，而且整个分布式缓存需要一个路由服务来做负载均衡，一旦路由服务挂了，整个缓存也就不可用了，还要考虑做高可用。</p><p>不过话说回来，只要是能解决问题的都是好技术，有点副作用还是可以忍受的。</p>',64),b=[k];function x(z,j){return s(),i("div",null,b)}const B=a(m,[["render",x],["__file","一致性hash算法.html.vue"]]);export{B as default};
