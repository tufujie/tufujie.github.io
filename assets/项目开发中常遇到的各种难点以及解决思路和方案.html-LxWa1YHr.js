import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,d as e}from"./app-AuAuVshg.js";const p={},t=e(`<p>Java项目是一个复杂的软件开发过程，其中会涉及到很多技术难点，这篇文章主要给大家介绍了关于java开发中常遇到的各种难点以及解决思路方案的相关资料</p><h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h2><h3 id="逻辑删除如何建立唯一索引" tabindex="-1"><a class="header-anchor" href="#逻辑删除如何建立唯一索引" aria-hidden="true">#</a> 逻辑删除如何建立唯一索引</h3><p><strong>场景描述：</strong></p><p>比如我们有project项目表</p><p>字段project_name是唯一的，且有逻辑删除字段is_delete，0表示未删除，1表示已删除</p><p>很显然，不能直接将project_name设置为唯一索引，例如A用户建立的project_name为java工程，又把这个工程（逻辑）删除了， 这时B用户是允许建立 java工程的。</p><p>那将is_delete 和project_name 共同设置为唯一索引是否可行呢？ 答案也是否定的，在B用户删除时，就会出现问题了。</p><p><strong>解决方案：</strong></p><p>is_delete 不用0和1表示，可改为数字递增，或者<mark>时间戳</mark>（<mark>尽量小</mark>，例如<mark>纳秒</mark>级别），这时将is_delete 和project_name 共同设置为唯一索引，可以解决该问题。</p><h3 id="唯一索引失效问题" tabindex="-1"><a class="header-anchor" href="#唯一索引失效问题" aria-hidden="true">#</a> 唯一索引失效问题</h3><p><strong>场景描述</strong>：</p><p>人员姓名和电话组成唯一索引 。</p><p><strong>出现问题</strong>：</p><p>有两个小孩，名字都叫小朋友，且他们都没有手机号，此时数据重复。唯一索引失效。我们换个场景，在高并发的电商活动中，用户姓名和vip标识码组成唯一索引，此时有两位用户 都不是vip用户，vip标识码都为空，那可能出现的问题就比较严峻了</p><p><strong>解决方案：</strong> <mark>唯一索引的字段设置为非空</mark>，因为空是允许重复的</p><p>（不管单独将某一个字段设置为唯一索引，还是多个字段组合成唯一索引，都一样的）</p><h3 id="加密字段查询问题" tabindex="-1"><a class="header-anchor" href="#加密字段查询问题" aria-hidden="true">#</a> 加密字段查询问题</h3><p><strong>场景描述</strong>：用户敏感信息，例如手机号 身份证 户籍所在地入库时，我们通常会加密， 这时需要查询。无法做到模糊查询，只能做全匹配查询</p><p><strong>解决方案：</strong></p><ul><li><p>数据量少时，例如只是一个公司内部系统的人员表，可以全表查询并解密，在Java代码中过滤（如果遇到要分页，那得好好考虑怎么处理分页问题了）</p></li><li><p>与业务/产品沟通，看搜索的字数是否相对固定的，例如某用户的户籍所在地是广东省广州市，那么我们可以将广东省、广州市拆分加密。假设广东省加密后字符串为pwd_gds，广州市加密后字符串为pwd_gzs，此时我们前端传入广州市，<mark>后端加密后再进行查询</mark>，sql语句变成= pwd_gzs</p></li></ul><p>当然，前面两种方式只是取巧，通常在中型规模的项目就已经不适用了，既然提到拆分，那我们可以联想到分词，所以我们可以使用es，将各词都拆分加密存入es中 （题外话 es也好 其它存储也罢 一定要设置密码 ）</p><h3 id="sql-in条件查询时-将结果按照传入顺序排序" tabindex="-1"><a class="header-anchor" href="#sql-in条件查询时-将结果按照传入顺序排序" aria-hidden="true">#</a> sql in条件查询时，将结果按照传入顺序排序</h3><p><strong>场景描述</strong>：例如我们调用外部接口获取id，再通过id去数据库查询，如果获取一条id 查一次库，是可以保证结果顺序和id传入顺序一致的；那此时我们希望优化一下下，等获取一批id时，再通过in条件查询的形式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> xx<span class="token punctuation">,</span>xxx<span class="token punctuation">,</span>xxxx <span class="token keyword">from</span> t <span class="token keyword">where</span> id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时如何保证返回结果顺序与id传入顺序一致呢？ 如上伪代码 id=5时，希望返回记录在第一条</p><p><strong>解决方案：</strong></p><p>sql层面处理</p><p>orcale ：order by decode</p><p>mysql ：<mark>order by field</mark></p><ol start="2"><li>如果条件允许，不是直接sql开发，那么推荐是在java代码中去二次处理数据的，循环idList 根据id对比去重新组装结果即可。</li></ol><h3 id="数据库主从复制-主从不同步问题" tabindex="-1"><a class="header-anchor" href="#数据库主从复制-主从不同步问题" aria-hidden="true">#</a> 数据库主从复制 主从不同步问题</h3><p><strong>场景描述</strong>：由于<mark>网络延迟、负载、自增主键不一致</mark>等等各种原因，导致主从数据不一致</p><p><strong>解决方法</strong>：线上真出现了问题，都到了需要集群数据库级别的项目，个人觉得吧，大部分还是手动修复数据吧，出现问题，谁都担不起...</p><p>言归正传：</p><ul><li><p>锁主库，锁为只读状态</p></li><li><p>数据导出</p></li><li><p>停止从库</p></li><li><p>数据导入</p></li><li><p>重新开始同步</p></li></ul><p>但是锁主库，停从库，这时候如果有数据来源，非常难处理，这时候最好的方式就是：<mark>业务对外公布维护</mark>了。</p><h3 id="数据库读写分离-主从延迟-读写不一致" tabindex="-1"><a class="header-anchor" href="#数据库读写分离-主从延迟-读写不一致" aria-hidden="true">#</a> 数据库读写分离 主从延迟 读写不一致</h3><p><strong>场景描述</strong>：读写分离时，读从库时数据和主库不一致</p><p><strong>解决方法</strong>：还是数据同步问题，数据同步有延迟，看业务是否能容忍错误，能就不处理，不能容忍就手动修数据/<mark>重新同步</mark>。</p><p>临时解决方案为：强制路由（<mark>强制读取主库</mark>） 只要不是大面积出现问题，手动修数据都是比较稳妥的方案。</p><h3 id="数据库死锁问题" tabindex="-1"><a class="header-anchor" href="#数据库死锁问题" aria-hidden="true">#</a> 数据库死锁问题</h3><p><strong>场景描述</strong>：数据库死锁，导致系统卡爆</p><p><strong>解决方法</strong>：个人曾切身体会过，在老旧项目中，使用的是oracle存储过程开发，由于大量的sql代码，且使用for update悲观锁，各处sql实在太多了，且未及时commit，引发了死锁，出现死锁我们需要在v$session 中找到死锁进程并杀死进程，并及时优化sql，简化或拆分逻辑。</p><p>在mysql中，使用replace into语句 也会引发死锁，建议使用select + insert方式替代</p><h3 id="跨库分页问题" tabindex="-1"><a class="header-anchor" href="#跨库分页问题" aria-hidden="true">#</a> 跨库分页问题</h3><p><strong>场景描述</strong>： 数据源来自不同的库，甚至不同类型的数据库（例如一部分来自mysql，部分来自于时序数据库）</p><p>大多数时候，只需要单独查不同的库就能满足业务，各司其职；但有一个页面需要查看这两个库的数据 并实现分页功能。</p><p><strong>解决方法</strong>：</p><p>首先能不跨库分页就不跨库分页，看业务是否真的不能妥协，数据源是否真的不能合并。</p><p>如果都不能，那只能考虑分页方案，下面是个人想到的方法：</p><p>将两个库的数据，同步至同一张大表中，记录好每次同步的最新那条数据的时间戳，下次同步时，同步这个时间戳以后的数据即可，大表只负责分页查询。</p><p>这时大表数据量虽然大些，但有分页在，效率不会过低。</p><p>（如果数据量过大 根据实际情况，考虑同步至es 、clickhouse等）</p><p>有人提过canal可以同步mysql数据到es，还是要提醒：生产环境中不是我们demo写着玩，使用这种中间件必须熟悉原理 否则重要数据丢失或出现问题 得不偿失！</p><h3 id="数据库连接池的使用" tabindex="-1"><a class="header-anchor" href="#数据库连接池的使用" aria-hidden="true">#</a> 数据库<mark>连接池</mark>的使用</h3><p>在Java项目中，数据库连接池是必不可少的。但是，在使用过程中，可能会遇到连接池连接不上数据库的问题。这时，可以通过检查数据库连接池的配置文件，以及检查数据库的连接地址、用户名和密码是否正确来解决问题。</p><h3 id="数据库事务的处理" tabindex="-1"><a class="header-anchor" href="#数据库事务的处理" aria-hidden="true">#</a> 数据库<mark>事务</mark>的处理</h3><p>在Java项目中，数据库事务的处理是非常重要的。如果事务处理不当，可能会导致数据不一致的问题。因此，在处理事务时，需要注意事务的隔离级别、事务的提交和回滚等问题。</p><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h2><h3 id="双写不一致问题-并发下数据库和缓存不一致" tabindex="-1"><a class="header-anchor" href="#双写不一致问题-并发下数据库和缓存不一致" aria-hidden="true">#</a> 双写不一致问题，并发下数据库和缓存不一致</h3><p><strong>场景描述</strong> ：在个人的 《从高并发场景下超卖问题到redis分布式锁》博客中 有提到过具体案例</p><p><strong>解决方法</strong>：</p><p>1.<mark>延迟双删</mark></p><p>优点：个人认为优点不明显</p><p>缺点：个人认为在写多读少的场景下，没有一点用</p><p>写多读少场景下，在写入时删除缓存，读时更新缓存，此时延迟双删，不能解决任何问题，反而降低性能</p><p>2.使用队列串行化</p><p>优点：避免不一致问题</p><p>缺点：效率低</p><p>3.分布式锁串行化，如redislock提供了读写锁</p><p>优缺点与第2点一致</p><p>4.使用<mark>canal</mark>中间件</p><p>个人未接触过，只是知道该中间件可以解决</p><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h2><h3 id="spring事务失效问题" tabindex="-1"><a class="header-anchor" href="#spring事务失效问题" aria-hidden="true">#</a> spring事务失效问题</h3><p><strong>场景描述</strong>：事务失效，出现异常不回滚，首先@Transactional需要加上(rollbackFor = Exception.class)，为什么阿里规范要求加上有文章详细解读</p><p><strong>解决方法</strong>：所有失效问题都是因为对spring代理对象机制理解不深导致的，失效只是自己没用对。</p><h2 id="分布式" tabindex="-1"><a class="header-anchor" href="#分布式" aria-hidden="true">#</a> 分布式</h2><h3 id="分布式事务问题" tabindex="-1"><a class="header-anchor" href="#分布式事务问题" aria-hidden="true">#</a> 分布式事务问题</h3><p><strong>场景描述</strong>：在分布式中需要事务回滚</p><p><strong>解决方法</strong>：可以引入<mark>seata</mark>中间件，seata中间件本身就是个事务调度器，基于mysql的undo日志；如果不引入seata，也可以手动回滚，但这得严格要求代码及时调用，且不适用高并发场景，仅适用于中小型项目， 伪代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// service A</span>

<span class="token keyword">public</span> <span class="token class-name">GoodsDO</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">GoodsDO</span> gs <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    database<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> gs<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">GoodsDO</span>  gs<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    database<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>gs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token comment">// service B</span>

<span class="token annotation punctuation">@Autowired</span>

<span class="token keyword">private</span> <span class="token class-name">ServiceA</span> serviceA<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>

        <span class="token class-name">GoodsDO</span>  gs <span class="token operator">=</span> serviceA<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// do other things  serviceB.xx();</span>

    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token comment">// 这里可以换成aop方式，也可以通过mq实现异步</span>

        serviceA<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>gs<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="maven" tabindex="-1"><a class="header-anchor" href="#maven" aria-hidden="true">#</a> Maven</h2><h3 id="maven依赖冲突问题-jar包版本冲突问题" tabindex="-1"><a class="header-anchor" href="#maven依赖冲突问题-jar包版本冲突问题" aria-hidden="true">#</a> maven依赖冲突问题（jar包版本冲突问题）</h3><p><strong>场景描述</strong>：classNotFound， 这是在项目中，引入版本不正确最经常遇到的问题了。我们跟进报错类，找到顶部import导包处，假设我们红色涂抹部分报红，我们可以找到前一级目录（红色划线处），按住ctrl键，再鼠标左键点击，找到所在jar包</p><p><strong>解决方案：</strong> 将jar包升级（或降级）。</p><p>但很多时候，该jar包并不是我们直接通过maven依赖引入的，可能是通过其它组件内部引用的，这个时候我们就可以通过mvn dependency:tree 命令，将控制台打印信息复制到文本编辑器，在文本编辑器搜索即可知道是哪个父包引入的</p><h2 id="web开发类问题" tabindex="-1"><a class="header-anchor" href="#web开发类问题" aria-hidden="true">#</a> Web开发类问题</h2><h3 id="前端页面的优化" tabindex="-1"><a class="header-anchor" href="#前端页面的优化" aria-hidden="true">#</a> 前端页面的优化</h3><p>在Web开发中，前端页面的优化是非常重要的。如果前端页面加载速度过慢，可能会导致用户体验不佳。因此，在开发过程中，需要注意前端页面的优化，如减少HTTP请求、压缩CSS和JavaScript文件等。</p><h3 id="后端接口的设计" tabindex="-1"><a class="header-anchor" href="#后端接口的设计" aria-hidden="true">#</a> 后端接口的设计</h3><p>在Web开发中，后端接口的设计是非常重要的。如果接口设计不合理，可能会导致系统出现安全漏洞或者性能问题。因此，在设计接口时，需要注意接口的安全性、可扩展性和性能等问题。</p><h2 id="多线程类问题" tabindex="-1"><a class="header-anchor" href="#多线程类问题" aria-hidden="true">#</a> 多线程类问题</h2><h3 id="线程安全的处理" tabindex="-1"><a class="header-anchor" href="#线程安全的处理" aria-hidden="true">#</a> 线程<mark>安全</mark>的处理</h3><p>在Java项目中，多线程的处理是非常常见的。但是，在多线程处理时，需要注意线程安全的问题。如果线程安全处理不当，可能会导致数据不一致的问题。因此，在处理多线程时，需要注意线程安全的处理，如使用synchronized关键字、使用线程安全的集合类等。</p><h3 id="线程池的使用" tabindex="-1"><a class="header-anchor" href="#线程池的使用" aria-hidden="true">#</a> 线程池的使用</h3><p>在Java项目中，线程池的使用是非常常见的。但是，在使用线程池时，需要注意线程池的大小、线程池的类型等问题。如果线程池的大小设置不当，可能会导致系统出现性能问题。因此，在使用线程池时，需要注意线程池的大小和类型的选择。</p><h2 id="java服务如何作为websocket客户端" tabindex="-1"><a class="header-anchor" href="#java服务如何作为websocket客户端" aria-hidden="true">#</a> Java服务如何作为websocket客户端</h2><p><strong>场景描述</strong>：有的时候我们对接供应商/甲方接口，可能会遇到对方给的websocket接口，我们避免在前后端传输之间出现数据丢失问题可能想在后端自己搭建websocket客户端。注意是客户端，网上搜java websocket客户端，千篇一律都是搜出作为服务端的教程。</p><p><strong>解决方法</strong>：可以使用netty实现，个人目前在写自动重连和发送心跳时遇到了问题，找了大佬写的比较好的代码，并经过测试，是可用的，具体的代码会单独发博客教程</p><h2 id="如何避免多人同时修改问题" tabindex="-1"><a class="header-anchor" href="#如何避免多人同时修改问题" aria-hidden="true">#</a> 如何避免多人同时修改问题</h2><p><strong>场景描述</strong>：例如<strong>企业管理系统</strong>中，管理人员可以修改员工的基本信息，员工自己也可以修改。员工在修改过程中，如果管理员已经修改并提交，员工随后提交，这就会将管理人员修改的内容覆盖。</p><p><strong>解决方法</strong>：详情接口，加上乐观锁版本号，在点击编辑按钮时，调用一次详情接口，获取到当前的乐观锁版本号，例如员工点编辑时version = 1，接下来管理员也点击了编辑，管理员得到的版本号也为1（此时员工还没保存），接着管理员点击保存，前端将版本号传回后端，保存接口中去判断前端传入的版本号和当前数据库版本号是否一致（这个时候是一致的都是1），管理员保存成功，修改乐观锁版本号。员工点击保存时，传入的版本号也为1，但此时数据库获取的版本号，已经变成2了，提示前端信息已被他人修改，刷新页面再进入。</p><h2 id="netty中发送多条指令-如何与回复内容进行对应" tabindex="-1"><a class="header-anchor" href="#netty中发送多条指令-如何与回复内容进行对应" aria-hidden="true">#</a> netty中发送多条指令，如何与回复内容进行对应</h2><p><strong>场景描述</strong>：netty中，向服务端发送多条指令，接收到回复时，如何确定哪条内容对应是哪条指令发送的</p><p><strong>解决方法</strong>：可以在发送时，在数据头部添加一个请求ID字段，或者在尾部添加一个ack应答机制，但这前提都是需要服务端进行配合。 参考代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 客户端代码</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>

    <span class="token comment">// 记录每个请求的请求ID</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> requestMap
<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 记录每个请求对应的响应结果</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseMap
<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 请求ID生成器</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> requestIdGenerator
<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">int</span> requestId <span class="token operator">=</span> requestIdGenerator<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        buf<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        buf<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将请求ID和请求数据保存到请求映射表</span>

        requestMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>requestId<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>

            <span class="token keyword">int</span> requestId <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            buf<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">readerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> request <span class="token operator">=</span> requestMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token comment">// 将请求ID和响应数据保存到响应映射表</span>

                <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

                responseMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 从请求映射表中删除请求ID</span>

                requestMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ack：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>

    <span class="token comment">// 记录上一次请求的ACK字段的值</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> lastAck <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 在请求数据末尾添加一个预留的ACK字段</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> requestData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        requestData<span class="token punctuation">[</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> lastAck<span class="token punctuation">;</span>

        channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>requestData<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>

            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            buf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> ack <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token comment">// 修改ACK字段的值为1</span>

            data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

            lastAck <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

            <span class="token comment">// 处理服务端的响应</span>

            <span class="token function">handleResponse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 处理服务端的响应</span>

        <span class="token comment">// ...</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那如果服务端拒绝配合呢？ 那我们只能在等接收到响应后，再发送下一条指令，思路如下 (但是注意 并发下会出现问题 如果有并发场景，必须得服务端配合做应答机制)：</p><p>1.定义一个 指令下标 (我们以要发送10条指令为例) ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.提供一个修改下标的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setOtherIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 如果下标到了10 则清0 进行下一次的轮询</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cabinIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        cabinIndex<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

        cabinIndex<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.发送指令</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0x01</span><span class="token punctuation">}</span>

<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0x02</span><span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">// .....</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.channelRead 方法中处理数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// dosomething</span>

<span class="token comment">// 处理完毕后 下标偏移</span>

<span class="token function">setOtherIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Java面试中，项目经验是面试官最为关注的一个方面。因此，面试者需要准备好自己的项目经验，并且要能够清晰地表达出自己在项目中遇到的问题以及解决方法。本文将按照不同的类别，介绍一些Java面试项目中常见的问题及解决方法。</p><h2 id="项目管理问题" tabindex="-1"><a class="header-anchor" href="#项目管理问题" aria-hidden="true">#</a> 项目管理问题</h2><p>随着项目的进行下去，在团队项目中出现的问题开始越来越多，也更明显。</p><p>一、<strong>在项目初期对项目的<mark>需求说明的不够简单明确</mark>，造成各成员之间的理解存在差异</strong>，由于团队成员的交流量不够，在项目进行一段时间后才发现团队成员的理解出现了不小的差异，导致前期写出的很多东西无法组合进行使用，甚至会因为软件方向发生争执。在发现问题后，团队增加了团队会议的次数，并要求在每次会议上各个团员对项目需要如何进行下去用简单的语言进行描述（尽量保证使用的语言不会出现二义性），然后通过所有成员的商定决定项目进行方向。通过足够的联系以及集体商定的方向继续完成项目，确保团队能有相同的方向，不会造成成员做太多的无用功。</p><p>二、<strong><mark>未考察团队真实能力就定下目标</mark>，使得项目的既定目标定得太高（或太低）</strong>。在我们的项目中，我们将团队项目的要求定的太高而未真正考虑团队的实力。到了团队项目运作时，发现有许多的难点是我们现在的能力无法解决的。在问题出现后，我们决定先对团队能力进行能力评估（根据成员以前的表现、编码能力、知识面宽度整体考虑），将目标修改至我们能力范围之内。同时，将我们的原定目标所达不到的功能放置以后，将这些功能视为扩展功能，准备在基础项目完成后当做软件的扩展方向。</p><p>三、<strong>项目初期<mark>分工不明确</mark>，只是对项目需求、目前阶段工作等进行了说明</strong>。结果导致有多个成员同时进行同一项工作，使得某些工作人员过多，浪费了团队资源，而在另一些工作却因为没有人员去操作，导致工作闲置。这样不止是大大拖住了项目节奏，还造成了人力资源的浪费，使得团队的工作十分不合理。在问题出现后，我们根据成员的能力，对成员进行了分工，同时要求成员及时将自己完成的工作与团队共享，同时对已完成工作的成员进行新的工作分配，在使团队工作更有条理的同时，也尽量避免人力资源的浪费。</p><p>项目的工作还在继续进行，可能在之后的工作还会遇到更多的困难，也会面对更多的问题。不过，我发现这些问题带给我们的，更多的是让我们学会该如何去更好的使团队以更高的效率，更好的运行下去。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在Java面试项目中，以上问题是比较常见的。如果面试者能够清晰地表达出自己在项目中遇到的问题以及解决方法，那么就能够给面试官留下深刻的印象。因此，在准备面试时，需要认真准备自己的项目经验，并且要能够清晰地表达出自己在项目中遇到的问题以及解决方法。</p>`,128),c=[t];function i(o,l){return s(),a("div",null,c)}const r=n(p,[["render",i],["__file","项目开发中常遇到的各种难点以及解决思路和方案.html.vue"]]);export{r as default};
