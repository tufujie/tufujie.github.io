const t=JSON.parse('{"key":"v-b667f888","path":"/home/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AF%B9%E6%AF%94/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB.html","title":"接口和抽象类","lang":"zh-CN","frontmatter":{"title":"接口和抽象类","description":"抽象类（abstract class）和接口（interface）★★★ 接口中所有的方法隐含都是抽象的。而抽象类则可以同时包含抽象（用于子类差异化实现）和非抽象（用于共用）的方法； 接口中定义的方法必须是不包含具体实现的（即隐式的抽象方法）；但抽象类中既可以定义抽象方法（不包含具体实现）又可以定义非抽象方法( 包含具体实现 )； 类可以不实现抽象类和接口声明的所有方法，但这种情况下，该类必须声明成抽象的； 抽象类可以在不提供接口方法实现的情况下实现接口； 类可以实现很多个接口，但是只能继承一个抽象类（单继承，多实现）； 抽象类中可以有构造函数，可以有main方法并可以运行，而接口中都不存在； 接口中声明的变量默认都是final的；但抽象类可以包含非final的变量； 接口中的成员方法默认都是public的；但抽象类中的成员函数可以是 private、protected、public； 接口是绝对抽象的，不可以被实例化； JDK8及之后，接口中可以包含default方法，抽象类中不可以；","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AF%B9%E6%AF%94/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"接口和抽象类"}],["meta",{"property":"og:description","content":"抽象类（abstract class）和接口（interface）★★★ 接口中所有的方法隐含都是抽象的。而抽象类则可以同时包含抽象（用于子类差异化实现）和非抽象（用于共用）的方法； 接口中定义的方法必须是不包含具体实现的（即隐式的抽象方法）；但抽象类中既可以定义抽象方法（不包含具体实现）又可以定义非抽象方法( 包含具体实现 )； 类可以不实现抽象类和接口声明的所有方法，但这种情况下，该类必须声明成抽象的； 抽象类可以在不提供接口方法实现的情况下实现接口； 类可以实现很多个接口，但是只能继承一个抽象类（单继承，多实现）； 抽象类中可以有构造函数，可以有main方法并可以运行，而接口中都不存在； 接口中声明的变量默认都是final的；但抽象类可以包含非final的变量； 接口中的成员方法默认都是public的；但抽象类中的成员函数可以是 private、protected、public； 接口是绝对抽象的，不可以被实例化； JDK8及之后，接口中可以包含default方法，抽象类中不可以；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-02T09:17:20.000Z"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-02-02T09:17:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"接口和抽象类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-02T09:17:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1706865440000,"updatedTime":1706865440000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":1}]},"readingTime":{"minutes":2.74,"words":821},"filePathRelative":"home/技术选型/技术栈对比/接口和抽象类.md","localizedDate":"2024年2月2日","excerpt":"<p><strong>抽象类（abstract class）和接口（interface）★★★</strong></p>\\n<ul>\\n<li>\\n<p>接口中所有的方法隐含都是抽象的。而抽象类则可以同时包含抽象（用于子类差异化实现）和非抽象（用于共用）的方法； 接口中定义的方法必须是不包含具体实现的（即隐式的抽象方法）；但抽象类中既可以定义抽象方法（不包含具体实现）又可以定义非抽象方法( 包含具体实现 )；</p>\\n</li>\\n<li>\\n<p>类可以不实现抽象类和接口声明的所有方法，但这种情况下，该类必须声明成抽象的；</p>\\n<ul>\\n<li>抽象类可以在不提供接口方法实现的情况下实现接口；</li>\\n</ul>\\n</li>\\n<li>\\n<p>类可以实现很多个接口，但是只能继承一个抽象类（单继承，多实现）；</p>\\n</li>\\n<li>\\n<p>抽象类中可以有构造函数，可以有main方法并可以运行，而接口中都不存在；</p>\\n</li>\\n<li>\\n<p>接口中声明的变量默认都是final的；但抽象类可以包含非final的变量；</p>\\n</li>\\n<li>\\n<p>接口中的成员方法默认都是public的；但抽象类中的成员函数可以是 private、protected、public；</p>\\n</li>\\n<li>\\n<p>接口是绝对抽象的，不可以被实例化；</p>\\n</li>\\n<li>\\n<p>JDK8及之后，接口中可以包含default方法，抽象类中不可以；</p>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
