import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as d,d as o}from"./app-AuAuVshg.js";const n={},s=o('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> <strong>简介</strong></h2><p>本文介绍Dubbo与SpringCloud的区别，包括使用场景和优缺点。</p><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> <strong>对比</strong></h2><p><strong>使用场景</strong></p><table><thead><tr><th><strong>SpringCloud</strong></th><th><strong>Dubbo</strong></th></tr></thead><tbody><tr><td>中小项目。</td><td>大项目，并发大。（一般百人以上的项目）</td></tr></tbody></table><h3 id="springcloud占优势的项" tabindex="-1"><a class="header-anchor" href="#springcloud占优势的项" aria-hidden="true">#</a> <strong>SpringCloud占优势的项</strong></h3><table><thead><tr><th><strong>项</strong></th><th><strong>SpringCloud</strong></th><th><strong>Dubbo</strong></th></tr></thead><tbody><tr><td><strong>包依赖</strong></td><td>维护简单：通过maven指定spring-cloud-parent版本即可。</td><td>维护困难：需要手动维护jar包依赖。</td></tr><tr><td><strong>功能支持</strong></td><td>功能完善：SpringCloud定位是微服务架构。 提供了<strong>微服务整套方案</strong>：服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等。</td><td>功能不完善：Dubbo定位是RPC 和服务治理。 配置中心、分布式跟踪等都需要自己去集成;</td></tr><tr><td><strong>开发难度</strong></td><td>简单：通过注解、配置等方式可直接使用。</td><td>复杂：服务提供方要提供服务接口jar包。 服务提供方与调用方接口依赖方式太强，需管理好版本。 通常我们在提供对外服务时，都会以REST的方式提供出去。Dubbo中我们要提供REST接口时，不得不实现一层代理，用来将RPC接口转换成REST接口进行对外发布。</td></tr><tr><td><strong>后期维护</strong></td><td>容易：社区活跃，教程丰富，遇到问题容易找到解决方案</td><td>较难：社区不够活跃</td></tr></tbody></table><h3 id="dubbo占优势的项" tabindex="-1"><a class="header-anchor" href="#dubbo占优势的项" aria-hidden="true">#</a> <strong>Dubbo占优势的项</strong></h3><table><thead><tr><th><strong>项</strong></th><th><strong>SpringCloud</strong></th><th><strong>Dubbo</strong></th></tr></thead><tbody><tr><td><strong>性能</strong></td><td>稍弱（主要是通信协议问题）。 Http 协议 + Rest 接口。</td><td>稍强。 RPC：TCP长连接和NIO异步传输（Netty实现）。 适合系统的响应时间有严格要求的场景（长连接的作用）。</td></tr><tr><td><strong>网络消耗</strong></td><td>大。 http协议传输，带宽会比较多 国内95%的公司内，网络消耗不是什么太大问题。若真的成了问题，通过压缩、二进制、高速缓存、分段降级等方法，很容易解决。</td><td>小。 二进制的传输，占用带宽会更少。</td></tr><tr><td><strong>接口约定</strong></td><td>较难约束（接口协议约定比较自由且松散）。 需要有强有力的行政措施来限制接口无序升级。</td><td>容易约束。 统一提供方提供的服务接口jar包版本即可。</td></tr></tbody></table><h3 id="功能支持" tabindex="-1"><a class="header-anchor" href="#功能支持" aria-hidden="true">#</a> <strong>功能支持</strong></h3><table><thead><tr><th><strong>项</strong></th><th><strong>Dubbo</strong></th><th><strong>SpringCloud</strong></th></tr></thead><tbody><tr><td><strong>服务注册中心</strong></td><td>Zookeeper</td><td>Spring Cloud Netfix Eureka</td></tr><tr><td><strong>服务调用方式</strong></td><td>RPC</td><td>REST API</td></tr><tr><td><strong>服务监控</strong></td><td>Dubbo-monitor， Spring Boot Admin</td><td>Spring Boot Admin</td></tr><tr><td><strong>熔断器</strong></td><td>不完善</td><td>Spring Cloud Netflix Hystrix</td></tr><tr><td><strong>服务网关</strong></td><td>无</td><td>Spring Cloud Netflix Zuul</td></tr><tr><td><strong>分布式配置</strong></td><td>无</td><td>Spring Cloud Config</td></tr><tr><td><strong>服务跟踪</strong></td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td><strong>数据流</strong></td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td><strong>批量任务</strong></td><td>无</td><td>Spring Cloud Task</td></tr><tr><td><strong>信息总线</strong></td><td>无</td><td>Spring Cloud Bus</td></tr></tbody></table><p>Dubbo对于上表中总结为“无”的组件不代表不能实现，而只是Dubbo框架自身不提供，需要另外整合以实现对应的功能，比如：</p><ul><li><p>分布式配置：可以使用淘宝的diamond、百度的disconf来实现分布式配置管理。但是Spring Cloud中的Config组件除了提供配置管理之外，由于其存储可以使用git，因此它天然的实现了配置内容的版本管理，可以完美的与应用版本管理整合起来。</p></li><li><p>服务跟踪：可以使用京东开源的Hydra</p></li><li><p>批量任务：可以使用当当开源的Elastic-Job</p></li><li><p>……</p></li></ul><p>虽然，Dubbo自身只是实现了服务治理的基础，其他为保证集群安全、可维护、可测试等特性方面都没有很好的实现，但是几乎大部分关键组件都能找到第三方开源来实现，这些组件主要来自于国内各家大型互联网企业的开源产品。</p><p>Dubbo 已经适配到 Spring Cloud 生态，比如作为 Spring Cloud 的二进制通信方案来发挥 Dubbo 的性能优势，Dubbo 通过模块化以及对 HTTP 的支持适配到 Spring Cloud。</p>',15),g=[s];function e(a,i){return r(),d("div",null,g)}const b=t(n,[["render",e],["__file","Dubbo与SpringCloud区别.html.vue"]]);export{b as default};
