const e=JSON.parse('{"key":"v-3d091ce0","path":"/home/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%8E%9F%E5%88%99%E4%B8%80%E6%B3%95%E5%88%99.html","title":"面向对象的六原则一法则","lang":"zh-CN","frontmatter":{"title":"面向对象的六原则一法则","description":"口诀：开接一单，里合（迪） 开闭、接口隔离、依（一）赖倒置、单一职责、里氏替换、合成复用、迪米特 开始接单了，这是第一单，是离合器的单。 实际上，这些原则的目的只有一个：降低对象之间的耦合，增加程序的可复用性、可扩展性和可维护性。 记忆口诀：访问加限制，函数要节俭，依赖不允许，动态加接口，父类要抽象，扩展不更改。 在程序设计时，我们应该将程序功能最小化，每个类只干一件事。若有类似功能在此基础之上添加新功能，则要合理使用继承。对于多方法的调用，要会运用接口，同时合理设置接口功能与数量。最后类与类之间做到低耦合高内聚。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%8E%9F%E5%88%99%E4%B8%80%E6%B3%95%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"面向对象的六原则一法则"}],["meta",{"property":"og:description","content":"口诀：开接一单，里合（迪） 开闭、接口隔离、依（一）赖倒置、单一职责、里氏替换、合成复用、迪米特 开始接单了，这是第一单，是离合器的单。 实际上，这些原则的目的只有一个：降低对象之间的耦合，增加程序的可复用性、可扩展性和可维护性。 记忆口诀：访问加限制，函数要节俭，依赖不允许，动态加接口，父类要抽象，扩展不更改。 在程序设计时，我们应该将程序功能最小化，每个类只干一件事。若有类似功能在此基础之上添加新功能，则要合理使用继承。对于多方法的调用，要会运用接口，同时合理设置接口功能与数量。最后类与类之间做到低耦合高内聚。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-02T09:17:20.000Z"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-02-02T09:17:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象的六原则一法则\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-02T09:17:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"开闭原则","slug":"开闭原则","link":"#开闭原则","children":[]},{"level":2,"title":"接口隔离原则","slug":"接口隔离原则","link":"#接口隔离原则","children":[]},{"level":2,"title":"依赖倒置原则","slug":"依赖倒置原则","link":"#依赖倒置原则","children":[]},{"level":2,"title":"单一职责原则","slug":"单一职责原则","link":"#单一职责原则","children":[]},{"level":2,"title":"里氏替换原则","slug":"里氏替换原则","link":"#里氏替换原则","children":[]},{"level":2,"title":"合成聚合复用原则","slug":"合成聚合复用原则","link":"#合成聚合复用原则","children":[]},{"level":2,"title":"迪米特法则","slug":"迪米特法则","link":"#迪米特法则","children":[]}],"git":{"createdTime":1706865440000,"updatedTime":1706865440000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":1}]},"readingTime":{"minutes":7.38,"words":2214},"filePathRelative":"home/设计模式/面向对象的六原则一法则.md","localizedDate":"2024年2月2日","excerpt":"<p>口诀：<mark><strong>开接一单，里合（迪）</strong></mark></p>\\n<p><strong>开闭、接口隔离、依（一）赖倒置、单一职责、里氏替换、合成复用、迪米特</strong>\\n开始接单了，这是第一单，是离合器的单。</p>\\n<p>实际上，这些原则的目的只有一个：降低对象之间的耦合，增加程序的可复用性、可扩展性和可维护性。</p>\\n<p>记忆口诀：访问加限制，函数要节俭，依赖不允许，动态加接口，父类要抽象，扩展不更改。</p>\\n<p>在程序设计时，我们应该将程序功能最小化，每个类只干一件事。若有类似功能在此基础之上添加新功能，则要合理使用继承。对于多方法的调用，要会运用接口，同时合理设置接口功能与数量。最后类与类之间做到低耦合高内聚。</p>","autoDesc":true}');export{e as data};
