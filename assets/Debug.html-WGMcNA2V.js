import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as t,d as a}from"./app-AuAuVshg.js";const p="/assets/Debug按钮-edwU67H_.png",s="/assets/Debug变量右击显示-DryF4-hV.png",n="/assets/Debug界面设置-cZnY--dO.png",o="/assets/Debug界面设置2-7L837nPG.png",i={},g=a('<p>在现在的开发中，我们经常采用Debug来追踪代码的运行流程，通常在程序运行过程中出现异常，启用Debug模式可以分析定位异常发生的位置，以及在运行过程中参数的变化。通常我们也可以启用Debug模式来跟踪代码的运行流程去学习三方框架的源码。</p><h2 id="界面-按钮释义" tabindex="-1"><a class="header-anchor" href="#界面-按钮释义" aria-hidden="true">#</a> 界面/按钮释义</h2><figure><img src="'+p+'" alt="Debug按钮" tabindex="0" loading="lazy"><figcaption>Debug按钮</figcaption></figure><p>Rerun：重新跑程序</p><p>Stop：停止运行服务</p><p>Resume Program（<mark><strong>F8</strong></mark>）：跳转到下一个断点，如果没有断点则结束</p><p>Pause Program：暂停程序</p><p>Step Over（<mark><strong>F6</strong></mark>）：继续向下运行代码行，不会进入当前行的方法中</p><p>Step Into（<strong>F5</strong>）：进入当前代码行的方法内部（既可以进入自己写的方法也可以进入源码的方法），若不存在方法则直接运行至下一行代码</p><p>Step Out（<strong>F7</strong>）：返回上一步，从进入的方法内回退到方法调用处的下一行代码，此时进入的方法已执行，不能再使用 Step Into 进入方法和不可以使变量回到待调用状态</p><p>View Breakpoints：<strong>查看所有断点</strong>，可以快速进行条件设置等</p><p>Mute Breakpoints（<strong>Ctrl + F7</strong>）：<strong>禁用</strong>/启用断点，<mark>结束Debug</mark>：<strong>Ctrl + F7禁用后按F8</strong></p><p>Toggle Line Breakpoint（<strong>Ctrl + F8</strong>）：<strong>开启</strong>/关闭行断点</p><h3 id="省略号里面按钮" tabindex="-1"><a class="header-anchor" href="#省略号里面按钮" aria-hidden="true">#</a> 省略号里面按钮</h3><p>Show Execution Point，<strong>Alt + F10</strong>：<strong>回到断点正在执行位置</strong>，有时候看代码看到了别处，需要回到代码正在执行的位置</p><p>Evaluate Expression，<strong>Ctrl + U</strong>：计算表达式即执行调式的代码，+回车可以直观看到代码中变量的内容</p><p><strong>Reset Frame</strong>：撤销，从进入的方法内强制回退到待调用的状态（可以使变量回到待调用状态），可以在 <strong>Thread &amp; Variables</strong> 中选择需要回退到的方法调用处，这样一次Debug可以不断吃后悔药回到想到达的位置，直到成功定位到出问题的地方。</p><p>![Reset Frame](./media/Reset Frame.png)</p><p>Run to Cursor**（Crtr + F9）**：在不用打断点的情况下直接运行到你的光标所在的代码行并产生断点的作用，这种前提是前面必须有断点，然后选择需要定位的行，然后输入快捷键</p><p>Force Run to Cursor： 强制到鼠标光标处</p><p>Force Return：强制返回，从当前执行代码处强制结束方法（当前执行代码处后的代码不再运行/避免操作资源）</p><h2 id="有哪些断点" tabindex="-1"><a class="header-anchor" href="#有哪些断点" aria-hidden="true">#</a> 有哪些断点</h2><p><strong>行断点，圆圈形状</strong><strong>变量断点/读写监控，眼睛形状</strong>：每次涉及到变量的修改都会跳转到修改的位置 方法断点，菱形 条件表达式断点，在断点的基础上加上了 ? 形状，三位运算符的感觉，true进入断点 异常断点/捕获异常，闪电形状，先添加设置异常断点，异常发生时进入断点 打印堆栈信息，勾选&quot;Breakpoint hit&quot; Message，Stack trace</p><h2 id="多线程调试" tabindex="-1"><a class="header-anchor" href="#多线程调试" aria-hidden="true">#</a> 多线程调试</h2><p>右击断点，Suspend选择Thread，点击Make Default，后面的断点都是Thread的，这样即使打在线程代码中的断点在运行时也会进入，同时，远程Debug不会中断服务，导致服务重启。</p><h2 id="设置条件断点" tabindex="-1"><a class="header-anchor" href="#设置条件断点" aria-hidden="true">#</a> 设置条件断点</h2><p>左边是你曾经设置过的断点，右击可以设置条件断点（满足某个条件的时候，暂停程序的执行，如 ch == 98）。结束调试后，应该在箭头1处把所设的断点删除</p><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><figure><img src="'+s+'" alt="Debug变量右击显示" tabindex="0" loading="lazy"><figcaption>Debug变量右击显示</figcaption></figure><p>右击选择分别表示：</p><p><strong>Inspect</strong>：检查，可以在弹框<mark>查看值</mark>，<strong>Ctrl + Shift + I</strong></p><p>New Class Level Watch：新等级查看</p><p>Set Value：<mark>设置值</mark></p><p>Copy Value：拷贝值</p><p>Compare Value with Clipboard：当前值和剪切板值比较</p><p>Copy Name：拷贝属性名</p><p><strong>Evaluate Expression</strong>：求值表达式，可以查看值</p><p>Show Referring Objects：显示引用对象</p><p>Jump To Source：跳到值的定义处</p><p><strong>Jump To Type Source</strong>：跳到值的类型定义处</p><p>View Text：把值作为文本查看</p><p>View as：把值作为某种格式查看</p><p>Show types：限制变量类型</p><p>Mute Renderers：禁用渲染器</p><p>Customize Data Views：自定义数据视图</p><h2 id="watches" tabindex="-1"><a class="header-anchor" href="#watches" aria-hidden="true">#</a> Watches</h2><p>有时候Variables里面的变量值过多，需要单独拎出来查看，在Watches中输入对应的变量名即可查看</p><p>![Debug Watches](./media/Debug Watches.png)</p><ul><li><p>Insert快捷键 || 添加按钮 || 右击添加</p></li><li><p><strong>使用JSONObject.toJSONString(Object)，拷贝JSON格式的对象的值</strong></p></li><li><p><strong>右击选择分别表示：</strong></p></li><li><p>New Watch：新查看</p></li><li><p>Remove Wacth：移除查看</p></li><li><p>Remove All Wacth：移除所有查看</p></li><li><p>Edit...：编辑这个变量</p></li></ul><p>其它同Variables中的说明</p><h2 id="界面设置" tabindex="-1"><a class="header-anchor" href="#界面设置" aria-hidden="true">#</a> 界面设置</h2><figure><img src="'+n+'" alt="Debug界面设置" tabindex="0" loading="lazy"><figcaption>Debug界面设置</figcaption></figure><figure><img src="'+o+'" alt="Debug界面设置2" tabindex="0" loading="lazy"><figcaption>Debug界面设置2</figcaption></figure><p><strong>取消勾选</strong>：</p><p>Show Services Tree</p><p><strong>勾选</strong>：</p><p>Frames</p><p>Variables</p><p>Output</p>',59),h=[g];function u(c,l){return r(),t("div",null,h)}const m=e(i,[["render",u],["__file","Debug.html.vue"]]);export{m as default};
