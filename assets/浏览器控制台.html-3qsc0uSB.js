import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as i,d as r}from"./app-AuAuVshg.js";const t="/assets/Filter块-zEGkExgl.png",n="/assets/页面的一次刷新-2h4nyHON.png",s="/assets/Headers-AZ29gg7o.png",d="/assets/响应内容的结构化展示-PVbEjL9_.png",o="/assets/响应内容的JSON格式展示-w65uC4IO.png",h="/assets/美化的JSON格式-_MP_bkvO.png",p="/assets/响应内容的检索-9st-yjev.png",c={},l=r('<h2 id="requests-table" tabindex="-1"><a class="header-anchor" href="#requests-table" aria-hidden="true">#</a> Requests Table</h2><p>![requests Table](.\\media\\requests Table.png)</p><h2 id="箭头" tabindex="-1"><a class="header-anchor" href="#箭头" aria-hidden="true">#</a> 箭头</h2><p>select an element in the page to inspect it：选择页面中的一个要素来检查</p><h2 id="框框" tabindex="-1"><a class="header-anchor" href="#框框" aria-hidden="true">#</a> 框框</h2><p>Toggle device toolbar：切换设备工具栏，切换浏览器端和手机端（可以选择一些具体的手机型号）</p><h2 id="元素-elements" tabindex="-1"><a class="header-anchor" href="#元素-elements" aria-hidden="true">#</a> 元素（Elements）</h2><p>用于查看或修改HTML元素的属性、CSS属性、监听事件、断点等。 可以直接点击元素进行CSS、html<mark>查看、复制、修改</mark>；此修改只会在本地生效；不会上传到服务器端，所以可以用来调试前端代码</p><h2 id="控制台-console" tabindex="-1"><a class="header-anchor" href="#控制台-console" aria-hidden="true">#</a> 控制台（Console）</h2><p>记录前端javascript对象、log信息、异常信息</p><h2 id="源代码-sources" tabindex="-1"><a class="header-anchor" href="#源代码-sources" aria-hidden="true">#</a> 源代码（Sources）</h2><p>查看网页的源代码HTML代码，js代码、CSS代码，可以直接修改代码进行前端调试 可以点击JS代码前面的数字来设置断点 ；断点可以在DOM元素节点发生改变时、XHR生命周期状态改变时、指定的事件执行时被触发</p><h2 id="网络-network" tabindex="-1"><a class="header-anchor" href="#网络-network" aria-hidden="true">#</a> 网络（Network）</h2><p>与网络相关的接口请求响应和网络传输等。 记录页面上的网络请求的详情信息，从发起页面请求Request后分析HTTP请求后得到的各个请求资源信息（包括状态、资源类型、大小、所用时间、<mark>Request</mark>和<mark>Response</mark>等），可以根据这个进行网络性能优化。<strong>最常使用</strong>。</p><h3 id="图标" tabindex="-1"><a class="header-anchor" href="#图标" aria-hidden="true">#</a> 图标</h3><p>红色实心圆圈：停止 || 开启记录请求</p><p><strong>右斜杠圆圈</strong>：<mark>清除请求信息</mark></p><p><strong>过滤器</strong>：<mark>过滤请求信息</mark>，通过请求接口进行过滤，属于精确过滤</p><p><strong>搜索按钮</strong>：搜索请求信息，模糊过滤，<mark>可以根据响应内容进行过滤</mark>，一般情况页面显示动态的某个值，例如：商品名称：牛奶或者售价：12.87，可以通过 牛奶 或者 12.87 进行过滤，然后结合过滤器进行过滤，<mark>快速定位取值调用的接口</mark>。先清除请求信息，然后搜索按钮搜索关键字，然后进行请求，最后点击Refresh刷新。</p><h3 id="filter块" tabindex="-1"><a class="header-anchor" href="#filter块" aria-hidden="true">#</a> Filter块</h3><figure><img src="'+t+'" alt="Filter块" tabindex="0" loading="lazy"><figcaption>Filter块</figcaption></figure><p>看接口的情况是比较多的，选择Fetch/XHR</p><h3 id="页面的一次刷新" tabindex="-1"><a class="header-anchor" href="#页面的一次刷新" aria-hidden="true">#</a> 页面的一次刷新</h3><figure><img src="'+n+'" alt="页面的一次刷新" tabindex="0" loading="lazy"><figcaption>页面的一次刷新</figcaption></figure><p>可以根据消耗时间进行倒序排序，逐一进行优化。也可以根据其他属性进行排序。</p><h3 id="具体的某个请求" tabindex="-1"><a class="header-anchor" href="#具体的某个请求" aria-hidden="true">#</a> 具体的某个请求</h3><h4 id="headers" tabindex="-1"><a class="header-anchor" href="#headers" aria-hidden="true">#</a> Headers</h4><figure><img src="'+s+'" alt="Headers" tabindex="0" loading="lazy"><figcaption>Headers</figcaption></figure><p><strong>General</strong>：包括请求接口，请求方法GET、POST等</p><p>Response Header：响应头</p><p>Request Header：请求头</p><h4 id="preview" tabindex="-1"><a class="header-anchor" href="#preview" aria-hidden="true">#</a> Preview</h4><p>响应内容的结构化展示</p><figure><img src="'+d+'" alt="响应内容的结构化展示" tabindex="0" loading="lazy"><figcaption>响应内容的结构化展示</figcaption></figure><h4 id="response" tabindex="-1"><a class="header-anchor" href="#response" aria-hidden="true">#</a> Response</h4><p>响应内容的JSON格式展示</p><figure><img src="'+o+'" alt="响应内容的JSON格式展示" tabindex="0" loading="lazy"><figcaption>响应内容的JSON格式展示</figcaption></figure><p>可以调整为美化的JSON格式</p><figure><img src="'+h+'" alt="美化的JSON格式" tabindex="0" loading="lazy"><figcaption>美化的JSON格式</figcaption></figure><p>可以进行响应内容的检索</p><figure><img src="'+p+'" alt="响应内容的检索" tabindex="0" loading="lazy"><figcaption>响应内容的检索</figcaption></figure><h4 id="initiator" tabindex="-1"><a class="header-anchor" href="#initiator" aria-hidden="true">#</a> Initiator</h4><p>初始话加载的文件，主要是js文件</p><h4 id="timing" tabindex="-1"><a class="header-anchor" href="#timing" aria-hidden="true">#</a> Timing</h4><p>在Timing标签中可以显示资源在整个请求生命周期过程中各部分时间花费信息，可能会涉及到如下过程的时间花费情况： 1、Queuing 排队的时间花费，可能由于该请求被渲染引擎认为是优先级比较低的资源（图片）、服务器不可用、超过浏览器的并发请求的最大连接数（Chrome的最大并发连接数为6）. 2、Stalled（阻塞） 浏览器对同一个主机域名的并发连接数有限制，因此如果当前的连接数已经超过上限，那么其余请求就会被阻塞，等待新的可用连接；此外脚本也会阻塞其他组件的下载； 　　优化措施： 　　1、将资源合理分布到多台主机上，可以提高并发数，但是增加并行下载数量也会增大开销，这取决于带宽和CPU速度，过多的并行下载会降低性能； 　　2、脚本置于页面底部； 3、Proxy Negotiation 与代理服务器连接的时间花费。 4、DNS Lookup 执行DNS查询的时间。网页上每一个新的域名都要经过一个DNS查询。第二次访问浏览器有缓存的话，则这个时间为0。请求某域名下的资源，浏览器需要先通过DNS解析器得到该域名服务器的IP地址。在DNS查找完成之前，浏览器不能从主机名那里下载到任何东西。 　　优化措施： 　　1、利用DNS缓存（设置TTL时间）； 　　2、利用Connection：keep-alive特性建立持久连接，可以在当前连接上进行多个请求，无需再进行域名解析； 5、Initial Connection： 建立连接的时间花费，包含了TCP握手及重试时间。 6、SSL http是超文本传输协议，以明文方式发送内容，不提供任何方式的数据加密，如果被不法分子截取浏览器和服务器之间的传输报文，会获取其中的信息。 　　https 是安全套接字层超文本传输协议，就是在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。 　　因此建立HTTPS连接的时间相当于三次握手的时间+SSL时间。 7、Request sent （发送请求） 发送HTTP请求的时间（从第一个bit到最后一个bit） 　　优化措施： 　　1、减少HTTP请求，可以使用CSS Sprites、内联图片、合并脚本和样式表等； 　　2、对不常变化的组件添加长久的Expires头（相当于设置久远的过期时间），在后续的页面浏览中可以避免不必要的HTTP请求； 8、<strong>Waiting（TTFB）</strong> (等待响应) 是最初的网络请求被发起到从服务器接收到第一个字节这段时间，它包含了TCP连接时间，发送HTTP请求时间和获得响应消息第一个字节的时间。 通常是耗费时间最长的。从发送请求到收到响应之间的空隙，会受到线路、服务器距离等因素的影响。 　　优化措施： 　　1、使用CDN，将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求，提高响应速度； 9、Content Download （下载） 获取Response响应数据的时间花费。 下载HTTP响应的时间（包含头部和响应体） 　　优化措施： 　　1、通过条件Get请求，对比If-Modified-Since和Last-Modified时间，确定是否使用缓存中的组件，服务器会返回“304 Not Modified”状态码，减小响应的大小； 　　2、移除重复脚本，精简和压缩代码，如借助自动化构建工具grunt、gulp等； 3、压缩响应内容，服务器端启用gzip压缩，可以减少下载时间；</p><h4 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies" aria-hidden="true">#</a> Cookies</h4><p>Cookie列表</p><h2 id="性能-performance" tabindex="-1"><a class="header-anchor" href="#性能-performance" aria-hidden="true">#</a> 性能（Performance）</h2><p>监控该网页的性能各种指标信息</p><h2 id="内存-memory" tabindex="-1"><a class="header-anchor" href="#内存-memory" aria-hidden="true">#</a> 内存（Memory）</h2><p>记录页面跟随时间的内存使用情况</p><h2 id="存储-application" tabindex="-1"><a class="header-anchor" href="#存储-application" aria-hidden="true">#</a> 存储（Application）</h2><p>查看一些本地存储、会话存储、已索引数据库、Cookie、缓存、帧等</p><h2 id="安全-security" tabindex="-1"><a class="header-anchor" href="#安全-security" aria-hidden="true">#</a> 安全（Security）</h2><p>调试当前网页的安全和认证等问题</p><p>如果网页是安全的，则会显示这样一条消息：This page is secure (valid HTTPS).。 通过点击View certificate可以查看main origin的服务器证书信息。 点击左侧可以查看指定源的连接和证书详情。 如果网页是不安全的，则会显示：This page is not secure.。 该面板可以区分两种类型的不安全的页面：</p><ul><li>如果被请求的页面通过HTTP提供服务，那么这个主源就会被标记为不安全。</li><li>如果被请求的页面是通过HTTPS获取的，但这个页面接着通过HTTP继续从其他来源检索内容，那么这个页面仍然被标记为不安全。这就是所谓的混合内容页面，混合内容页面只是部分受到保护，因为HTTP内容(非加密的内容)可以被嗅探者入侵，容易受到中间人攻击。</li></ul><h2 id="审计-audits" tabindex="-1"><a class="header-anchor" href="#审计-audits" aria-hidden="true">#</a> 审计（Audits）</h2><p>对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议</p>',59),g=[l];function f(u,m){return a(),i("div",null,g)}const b=e(c,[["render",f],["__file","浏览器控制台.html.vue"]]);export{b as default};
