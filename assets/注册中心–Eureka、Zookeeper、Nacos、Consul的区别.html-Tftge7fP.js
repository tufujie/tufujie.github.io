import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as d,c as r,d as e}from"./app-AuAuVshg.js";const o={},a=e('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>本文介绍分布式中常用的注册中心，包括：Eureka、Zookeeper、Nacos、Consul。会介绍他们之间的区别。</p><h2 id="注册中心对比" tabindex="-1"><a class="header-anchor" href="#注册中心对比" aria-hidden="true">#</a> 注册中心对比</h2><table><thead><tr><th><strong>项</strong></th><th><strong>Eureka</strong></th><th><strong>Zookeeper</strong></th><th><strong>Nacos</strong></th><th><strong>Consul</strong></th></tr></thead><tbody><tr><td><strong>CAP理论保证项</strong></td><td>AP（可用性与容错性）。 各个节点是平等的，只要有一台Eureka就可以保证服务可用，但查询到的数据并不是最新的。</td><td>CP（一致性与容错性）。 选举期间若注册服务瘫痪，虽然服务最终会恢复，但选举期间是不可用的。</td><td>CP或AP。 默认是AP</td><td>CP</td></tr><tr><td><strong>节点角色</strong></td><td>各个节点平等</td><td>有Leader和Follower角色</td><td></td><td></td></tr><tr><td><strong>分区问题</strong></td><td>采用自我保护机制解决分区问题</td><td>采用过半数存活原则</td><td></td><td></td></tr><tr><td><strong>健康检查</strong></td><td>Client Beat</td><td>Keep Alive</td><td>TCP/HTTP/MYSQL/Client Beat</td><td>TCP/HTTP/gRPC/Cmd</td></tr><tr><td><strong>负载均衡策略</strong></td><td>Ribbon</td><td>–</td><td>权重/metadata/Selector</td><td>Fabio</td></tr><tr><td><strong>雪崩保护</strong></td><td>有</td><td>无</td><td></td><td></td></tr><tr><td><strong>自动注销实例</strong></td><td>支持</td><td>支持</td><td></td><td></td></tr><tr><td><strong>访问协议</strong></td><td>HTTP</td><td>TCP</td><td></td><td></td></tr><tr><td><strong>监听支持</strong></td><td>支持</td><td>支持</td><td></td><td></td></tr><tr><td><strong>多数据中心</strong></td><td>支持</td><td>不支持</td><td></td><td></td></tr><tr><td><strong>跨注册中心同步</strong></td><td>不支持</td><td>不支持</td><td></td><td></td></tr><tr><td><strong>SpringCloud集成</strong></td><td>支持</td><td>支持</td><td></td><td></td></tr><tr><td><strong>Dobbo集成</strong></td><td>不支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td><strong>K8S集成</strong></td><td>不支持</td><td>不支持</td><td></td><td></td></tr></tbody></table><h2 id="详述" tabindex="-1"><a class="header-anchor" href="#详述" aria-hidden="true">#</a> 详述</h2><p><strong>CAP理论保证项详解</strong></p><p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。</p><h3 id="eureka保证ap" tabindex="-1"><a class="header-anchor" href="#eureka保证ap" aria-hidden="true">#</a> <strong>Eureka保证AP</strong></h3><p><strong>1.节点平等</strong></p><p>各个节点是平等关系，只要有一台Eureka就可以保证服务可用，而查询到的数据并不是最新的。</p><p>Eureka在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。</p><p><strong>2.自我保护机制</strong></p><p>此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ol><li><p>Eureka Server不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</p></li><li><p>Eureka Server仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上。(当前Eureka Server依然可用)</p></li><li><p>当网络稳定时，当前实例新的注册信息会被同步到其它节点中</p></li></ol><p>因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。Eureka 具有自我保护机制，所以可用性比较强，zookeeper 没有自我保护机制。</p><h3 id="zookeeper保证cp" tabindex="-1"><a class="header-anchor" href="#zookeeper保证cp" aria-hidden="true">#</a> <strong>Zookeeper保证CP</strong></h3><p>选举期间若注册服务瘫痪，虽然服务最终会恢复，但是选举期间是不可用的。</p><p>zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30~120s，且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。</p><p>在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册中心长期不可用是不能容忍的。 ​</p>',19),n=[a];function s(g,p){return d(),r("div",null,n)}const l=t(o,[["render",s],["__file","注册中心–Eureka、Zookeeper、Nacos、Consul的区别.html.vue"]]);export{l as default};
