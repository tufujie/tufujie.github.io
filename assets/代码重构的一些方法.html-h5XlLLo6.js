import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,d as t}from"./app-AuAuVshg.js";const e={},p=t(`<h2 id="抽取方法extract-method" tabindex="-1"><a class="header-anchor" href="#抽取方法extract-method" aria-hidden="true">#</a> 抽取方法Extract Method</h2><p>如果某个方法中的代码业务逻辑太多或代码过长，一般推荐不超过80行，需要将其中部分代码抽取出来，生成新的方法，则可以选中需要抽取出来的代码，然后右击鼠标，依次选择对应的栏位：Refactor -&gt; Extract Method</p><p>默认会生成一个方法名，如果方法名觉得不好，可以直接修改。</p><p>也可以点击设置按钮，点击More options进行详细修改，最后点击“Refactor”即可抽取出我们想要生成的方法。</p><p>快捷键是“ <mark>ALT + SHIFT + M</mark>”。</p><h2 id="合并重复代码-consolidate-duplicate-conditional-fragments" tabindex="-1"><a class="header-anchor" href="#合并重复代码-consolidate-duplicate-conditional-fragments" aria-hidden="true">#</a> 合并重复代码（Consolidate Duplicate Conditional Fragments）</h2><p>如果代码中存在重复的代码块，可以将他们封装成一个公共的方法，一是减少代码的冗余，二是功能拓展时避免遗漏修改。</p><p>重构前</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 求和
*/</span>
<span class="token keyword">int</span> <span class="token function">calculateTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
* 求平均
* 求平均的过程中需要先求和，所以如果不复用的话会有重复
*/</span>
<span class="token keyword">int</span> <span class="token function">calculateAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> average <span class="token operator">=</span> total <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">return</span> average<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重构后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 求和
*/</span>
<span class="token keyword">int</span> <span class="token function">calculateSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* 求和
*/</span>
<span class="token keyword">int</span> <span class="token function">calculateTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">calculateSum</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* 求平均
*/</span>
<span class="token keyword">int</span> <span class="token function">calculateAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">calculateSum</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> average <span class="token operator">=</span> total <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">return</span> average<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重命名rename" tabindex="-1"><a class="header-anchor" href="#重命名rename" aria-hidden="true">#</a> 重命名Rename</h2><p>所有的重命名快捷键都是“F2”</p><p>将光标防止需要修改名称的变量或方法名名上，然后按“<mark>F2</mark>，变量名会出现一个红色的框框，在框框中输入想要<mark>修改的变量名</mark>，按<mark>回车</mark>。</p><p>变量名的修改，如果存在get和set方法，则会提示是否修改get和set方法的名称：选择“Yes”即可。</p><p>在修改方法名时，我们会遇到其他地方也有相同的方法名的问题，但是有些地方的方法名我们是不需要修改的，那么就会出现确认弹框：选择我们需要修改的方法，单击ok即可。</p><p>类名的修改：</p><p>如果存在许多地方存在相同类名的类时，会出现确认窗口：勾选我们需要修改的，修改类名一般都是默认全选。</p><p>此时如果觉得修改不满意可按“CTRL + Z”取消修改。</p><h2 id="生成变量introduce-variable" tabindex="-1"><a class="header-anchor" href="#生成变量introduce-variable" aria-hidden="true">#</a> 生成变量Introduce Variable</h2><p>生成变量分为以下场景</p><ol><li>一个参数被多次调用（&gt;=3次）</li><li>实例化一个对象的时候生成对应的变量</li><li>一种是调用方法时生成返回值</li></ol><p>生成变量的快捷键是“<mark>CTRL + ALT + V</mark>”。</p><ol><li>一开始如下</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选到user.getName()然后快捷键，选择或对变量取名，结果如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>new Object();然后快捷键</li><li>obj.getMethod()然后快捷键</li></ol><h2 id="生成常量introduce-constant" tabindex="-1"><a class="header-anchor" href="#生成常量introduce-constant" aria-hidden="true">#</a> 生成常量Introduce Constant</h2><p>在方法体中有一个常量，选择后则可以生成一个常量。快速解决魔法值。</p><p>快捷键是“<mark>CTRL + ALT + C</mark>”。</p><h2 id="生成全局变量-类字段introduce-field" tabindex="-1"><a class="header-anchor" href="#生成全局变量-类字段introduce-field" aria-hidden="true">#</a> 生成全局变量/类字段Introduce Field</h2><p>在方法体中有一个局部变量，选择后则可以生成一个全局变量。</p><p>快捷键是“<mark>CTRL + ALT + F</mark>”。</p><h2 id="生成方法参数introduce-parameter" tabindex="-1"><a class="header-anchor" href="#生成方法参数introduce-parameter" aria-hidden="true">#</a> 生成方法参数Introduce Parameter</h2><p>在方法体中有一个局部变量，选择后则可以添加到方法参数列表中。</p><p>快捷键是“<mark>CTRL + ALT + P</mark>”。</p><h2 id="重构方法-change-signature" tabindex="-1"><a class="header-anchor" href="#重构方法-change-signature" aria-hidden="true">#</a> 重构方法（Change Signature）</h2><p>修改方法、类的签名，含参数、返回值类型等</p><p>快捷键是“ <mark>CTRL + F6</mark>”。</p><h2 id="提取接口-extract-interface" tabindex="-1"><a class="header-anchor" href="#提取接口-extract-interface" aria-hidden="true">#</a> 提取接口（Extract Interface）</h2><p>将一个类的部分公共方法提取到一个接口中。这样可以方便其他类实现该接口，提高代码的可扩展性和复用性。</p><h2 id="分解条件表达式-decompose-conditional" tabindex="-1"><a class="header-anchor" href="#分解条件表达式-decompose-conditional" aria-hidden="true">#</a> 分解条件表达式（Decompose Conditional）</h2><p>将复杂的条件表达式形成变量，或者拆分成多个简单的条件或者形成方法，以提高代码的可读性和可维护性。</p><h2 id="移动方法-move-method" tabindex="-1"><a class="header-anchor" href="#移动方法-move-method" aria-hidden="true">#</a> 移动方法（Move Method）</h2><p>将一个方法从一个类移动到另一个类中，以更好地组织代码和实现类的职责分离。</p><h2 id="拆分循环-split-loop" tabindex="-1"><a class="header-anchor" href="#拆分循环-split-loop" aria-hidden="true">#</a> 拆分循环（Split Loop）</h2><p>将一个循环中的多个操作拆分成多个独立的循环。这样可以提高代码的可读性和可维护性。</p><h2 id="合并循环-merge-loop" tabindex="-1"><a class="header-anchor" href="#合并循环-merge-loop" aria-hidden="true">#</a> 合并循环（Merge Loop）</h2><p>将多个循环合并成一个循环。这样可以减少循环的次数，提高代码的性能。</p><h2 id="引入参数对象-introduce-parameter-object" tabindex="-1"><a class="header-anchor" href="#引入参数对象-introduce-parameter-object" aria-hidden="true">#</a> 引入参数对象（Introduce Parameter Object）</h2><p>将多个参数封装成一个对象，以提高方法的可读性和简化方法的调用。</p><p>在进行代码重构时，还需要注意以下几点经验：</p><ol><li><mark>重构前先编写测试用例</mark>，确保重构后的代码功能仍然正确。</li><li>每次只修改一个地方，修改后立即进行测试，以确保不会引入新的问题。</li><li>尽量使用工具来辅助重构，比如IDE中的重构工具。</li><li>遵循团队的代码规范和最佳实践，以保持代码风格的一致性。</li><li>重构后需要及时提交代码，以便其他人了解并继续开发。</li></ol><p>总之，代码重构是一个迭代的过程，通过一系列小的改动来逐步优化代码。在进行代码重构时，需要选择合适的重构方法和遵循一些经验，以提高代码的可读性、可维护性和性能。</p>`,55),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","代码重构的一些方法.html.vue"]]);export{d as default};
