import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as n,d as r}from"./app-AuAuVshg.js";const s={},i=r(`<p><strong>就是你在项目中做过最牛逼的事，复杂的需求方案设计、性能优化、线上问题处理、项目重构等等；</strong></p><p>包括但不限于<strong>解决线上问题举例、项目上遇到的难点以及你是怎样解决的、个人优势、个人成长、你在项目的亮点表现、困难和挑战</strong></p><p>亮点一定是你在公司岗位上提供的<strong>一些好的解决方案</strong>。也许你在项目中通过一些很优雅的方式完成了某个<strong>复杂逻辑的设计</strong>，或者你为了解决一些重复劳动开发了一套<strong>自动化解决方案</strong>提升了工作效率，或者你开发了<strong>一个技术产品能够服务整个公司解决一些技术难题</strong>，或者再精细化一点，在流量特别大的时候你优化了一个接口提升了访问效率。</p><h2 id="个人亮点" tabindex="-1"><a class="header-anchor" href="#个人亮点" aria-hidden="true">#</a> 个人亮点</h2><ul><li><p>性格沉稳，做事细腻，富有耐心和责任心，刻苦认真，虚心好学，深得团队成员的信赖</p></li><li><p>喜欢有计划、有组织地做事</p></li><li><p>做事讲究方法论，工作效率高，喜欢研究、实践、总结，力争准确高效。就算是新的业务，也能够快速入手</p></li><li><p>有丰富的项目经验和解决问题的能力</p></li><li><p>个人技术亮点：技术全面，勇于应用合适的技术解决实际的问题</p></li></ul><h2 id="个人优势" tabindex="-1"><a class="header-anchor" href="#个人优势" aria-hidden="true">#</a> 个人优势</h2><p>理解力：对需求的理解力很强，明白客户是用来解决什么痛点的</p><p>效率：完善的技术体系、成熟的做事方法论体系</p><p>进度：项目管理能力</p><p>质量：成熟的研发规范、流程规范</p><h2 id="需求方案设计" tabindex="-1"><a class="header-anchor" href="#需求方案设计" aria-hidden="true">#</a> 需求方案设计</h2><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h3><h4 id="列表的查询条件封装" tabindex="-1"><a class="header-anchor" href="#列表的查询条件封装" aria-hidden="true">#</a> 列表的查询条件封装</h4><p>current当前页</p><p>rowCount每页大小</p><p>keyword模糊查询</p><p>query高级查询，对高级查询的封装，包含单一字段和多项查询拼接的逻辑封装，后台一行代码封装好传参，对应的就是MyBatis里面的查询条件</p><h4 id="列表的响应列封装" tabindex="-1"><a class="header-anchor" href="#列表的响应列封装" aria-hidden="true">#</a> 列表的响应列封装</h4><p>报表的查询结构定义</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>表头：
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span>（name<span class="token operator">:</span>展示名字<span class="token punctuation">,</span>field<span class="token operator">:</span>属性名称）
值：
rows<span class="token operator">:</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span>（取对应field的值）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列表的导入封装" tabindex="-1"><a class="header-anchor" href="#列表的导入封装" aria-hidden="true">#</a> 列表的导入封装</h4><h4 id="列表导出封装" tabindex="-1"><a class="header-anchor" href="#列表导出封装" aria-hidden="true">#</a> 列表导出封装</h4><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>List&lt;List&lt;String&gt;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="动态列表导出封装" tabindex="-1"><a class="header-anchor" href="#动态列表导出封装" aria-hidden="true">#</a> 动态列表导出封装</h4><p>动态列表导出的封装</p><h4 id="异步文件导出" tabindex="-1"><a class="header-anchor" href="#异步文件导出" aria-hidden="true">#</a> 异步文件导出</h4><p>时间较长的文件导出都使用任务中心导出，让用户可以明确看到文件导出的进度，状态，近期导出的文件备份</p><h3 id="导出get请求id拼接过长问题解决" tabindex="-1"><a class="header-anchor" href="#导出get请求id拼接过长问题解决" aria-hidden="true">#</a> 导出get请求id拼接过长问题解决</h3><p>如果勾选了id，那就将id通过post请求放入缓存，返回key，然后导出时接口带入这个key，通过这个key取缓存中的id</p><h2 id="分表" tabindex="-1"><a class="header-anchor" href="#分表" aria-hidden="true">#</a> 分表</h2><h2 id="限流-滑动窗口" tabindex="-1"><a class="header-anchor" href="#限流-滑动窗口" aria-hidden="true">#</a> 限流（滑动窗口）</h2><h2 id="第三方系统对接" tabindex="-1"><a class="header-anchor" href="#第三方系统对接" aria-hidden="true">#</a> 第三方系统对接</h2><h3 id="动态传参方案" tabindex="-1"><a class="header-anchor" href="#动态传参方案" aria-hidden="true">#</a> 动态传参方案</h3><p>有些第三方系统的字段不是固定的，是动态的，所以代码无法写死，这个时候就需要动态传参。</p><p>封装了第三方系统动态表单接口调用的表单传参，可以让客户根据自己的实际场景自己去配置双方系统的字段映射关系，保证了系统对接的灵活性</p><p>核心逻辑：第三方的key，我们的propertyName，是否明细，然后通过反射取值。</p><h3 id="深入集成系统请求对象与响应对象封装成sdk" tabindex="-1"><a class="header-anchor" href="#深入集成系统请求对象与响应对象封装成sdk" aria-hidden="true">#</a> 深入集成系统请求对象与响应对象封装成SDK</h3><p>对接的系统有A，B，C，D等多个接口，通过泛型的特性，封装请求对象和响应对象，还有公共的请求为SDK，业务可以直接调用</p><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><h3 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> MongoDB</h3><h4 id="运营看板大屏数据加载缓慢" tabindex="-1"><a class="header-anchor" href="#运营看板大屏数据加载缓慢" aria-hidden="true">#</a> 运营看板大屏数据加载缓慢</h4><p>原因：实时查询数据库大表，数据多，查询维度大</p><p>解决方案：</p><p>数据预热：定时任务将看板数据预先加载到mongodb中，然后接口查询时查询mongodb的汇总数据展示</p><h2 id="线上问题处理" tabindex="-1"><a class="header-anchor" href="#线上问题处理" aria-hidden="true">#</a> 线上问题处理</h2><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h3><h4 id="缓存与数据库数据不一致" tabindex="-1"><a class="header-anchor" href="#缓存与数据库数据不一致" aria-hidden="true">#</a> 缓存与数据库数据不一致</h4><p>原因：存在主从延迟，在延迟的时间内先主库更新了数据库，从1更新到2，然后清除了缓存，<mark>接着同一个事务</mark>查询了数据，由于从库还没同步到最新的数据（<mark>主从延迟</mark>），读取到了旧的数据1放进了缓存。所以数据库和缓存的数据就不一致了。</p><p>解决方案：</p><ul><li><p>二次查询时走写库。不建议；</p></li><li><p>从根本上解决主从延迟的问题。采取；</p></li></ul><h2 id="困难和挑战" tabindex="-1"><a class="header-anchor" href="#困难和挑战" aria-hidden="true">#</a> 困难和挑战</h2><p>组件会发生的问题以及对应的解决方案</p><p>问题：报表数据量大，已经经过了分表，但查询慢，用户体验度差</p><p>解决方案：</p><ol><li>使用多线程分批次查询，然后合并数据</li><li>使用定时任务，在定时任务中使用MongoDB存储结果数据，报表查询结果数据</li></ol><p>结果：报表查询快速，提升了客户对产品的满意度</p>`,56),d=[i];function h(t,p){return e(),n("div",null,d)}const o=a(s,[["render",h],["__file","个人亮点.html.vue"]]);export{o as default};
