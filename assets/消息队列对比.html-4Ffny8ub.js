const t=JSON.parse('{"key":"v-340af6de","path":"/home/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AF%B9%E6%AF%94/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AF%B9%E6%AF%94.html","title":"消息队列对比","lang":"zh-CN","frontmatter":{"title":"消息队列对比","description":"Kafka、ActiveMQ、RabbitMQ、RocketMQ RabbitMQ ActiveMQ RocketMQ Kafka 公司/社区 Rabbit Apache 阿里 Apache 开发语言 Erlang Java Java Scala&amp;Java 协议支持 AMQP OpenWire、STOMP、REST、XMPP、AMQP 自定义 自定义协议，社区封装了http协议支持 客户端支持语言 官方支持Erlang、Java、Ruby等，社区查出多种API，几乎支持所有语言 Java、C、C++、Python、PHPPerl、.net等 Java、C++(不成熟) 官方支持Java，社区产出多种API，如PHP，Python等 单机吞吐量 万级（5.95w/s）。 为保证消息可靠性在吞吐量上做了取舍。 万级 十万级（11.6w/s） 十万级（17.3w/s） 消息延迟/时效性 微秒级。 RabbitMQ的一大特点，延迟最低。 毫秒级 毫秒级 毫秒以内 可用性 高，基于主从架构实现可用性 高，基于主从架构实现可用性 非常高，分布式架构 非常高，分布式架构，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 消息可靠性 经过参数优化配置，可以做到0丢失 有较低的概率丢失数据 经过参数优化配置，可以做到0丢失 经过参数优化配置，可以做到0丢失 性能的稳定性 消息堆积时，性能不稳定、明显下降 队列较多、消息堆积时性能稳定 队列/分区多时性能不稳定，明显下降。消息堆积时性能稳定 功能支持 基于erlang开发，所以并发性能极强，性能极好，延时低 MQ领域的功能极其完备 MQ功能较为完备，分布式扩展性好 功能较为简单，主要支持加单MQ功能 优势 erlang语言开发，性能极好、延时很低，吞吐量万级、MQ功能完备，管理界面非常好，社区活跃；互联网公司使用较多 非常成熟，功能强大，在业内大量公司和项目中都有应用 接口简单易用，阿里出品有保障，吞吐量大，分布式扩展方便、社区比较活跃，支持大规模的Topic、支持复杂的业务场景，可以基于源码进行定制开发。 超高吞吐量，ms级的时延，极高的可用性和可靠性，分布式扩展方便 劣势 吞吐量较低，erlang语音开发不容易进行定制开发，集群动态扩展麻烦 偶尔有较低概率丢失消息，社区活跃度不高 接口不是按照标准JMS规范走的，有的系统迁移要修改大量的代码，技术有被抛弃的风险 有可能进行消息的重复消费 应用/使用场景 适合对可靠性和实时性要求高，对速度要求不高的场景。适合小公司。 主要用于解耦和异步，较少用在大规模吞吐的场景中 用于大规模吞吐、复杂业务中。适合对可靠性要求很高的场景。适合金融互联网（特别是电商的大量交易涌入，后端无法及时处理的情况）。在阿里双11已经经历了多次考验。 主要追求高吞吐量、高速度与持久化。主要用于处理活跃的流式数据，大数据量的数据处理上。适合日志采集，数据采集。在大数据的实时计算和日志采集中被大规模使用，是业界的标准","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AF%B9%E6%AF%94/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AF%B9%E6%AF%94.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"消息队列对比"}],["meta",{"property":"og:description","content":"Kafka、ActiveMQ、RabbitMQ、RocketMQ RabbitMQ ActiveMQ RocketMQ Kafka 公司/社区 Rabbit Apache 阿里 Apache 开发语言 Erlang Java Java Scala&amp;Java 协议支持 AMQP OpenWire、STOMP、REST、XMPP、AMQP 自定义 自定义协议，社区封装了http协议支持 客户端支持语言 官方支持Erlang、Java、Ruby等，社区查出多种API，几乎支持所有语言 Java、C、C++、Python、PHPPerl、.net等 Java、C++(不成熟) 官方支持Java，社区产出多种API，如PHP，Python等 单机吞吐量 万级（5.95w/s）。 为保证消息可靠性在吞吐量上做了取舍。 万级 十万级（11.6w/s） 十万级（17.3w/s） 消息延迟/时效性 微秒级。 RabbitMQ的一大特点，延迟最低。 毫秒级 毫秒级 毫秒以内 可用性 高，基于主从架构实现可用性 高，基于主从架构实现可用性 非常高，分布式架构 非常高，分布式架构，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 消息可靠性 经过参数优化配置，可以做到0丢失 有较低的概率丢失数据 经过参数优化配置，可以做到0丢失 经过参数优化配置，可以做到0丢失 性能的稳定性 消息堆积时，性能不稳定、明显下降 队列较多、消息堆积时性能稳定 队列/分区多时性能不稳定，明显下降。消息堆积时性能稳定 功能支持 基于erlang开发，所以并发性能极强，性能极好，延时低 MQ领域的功能极其完备 MQ功能较为完备，分布式扩展性好 功能较为简单，主要支持加单MQ功能 优势 erlang语言开发，性能极好、延时很低，吞吐量万级、MQ功能完备，管理界面非常好，社区活跃；互联网公司使用较多 非常成熟，功能强大，在业内大量公司和项目中都有应用 接口简单易用，阿里出品有保障，吞吐量大，分布式扩展方便、社区比较活跃，支持大规模的Topic、支持复杂的业务场景，可以基于源码进行定制开发。 超高吞吐量，ms级的时延，极高的可用性和可靠性，分布式扩展方便 劣势 吞吐量较低，erlang语音开发不容易进行定制开发，集群动态扩展麻烦 偶尔有较低概率丢失消息，社区活跃度不高 接口不是按照标准JMS规范走的，有的系统迁移要修改大量的代码，技术有被抛弃的风险 有可能进行消息的重复消费 应用/使用场景 适合对可靠性和实时性要求高，对速度要求不高的场景。适合小公司。 主要用于解耦和异步，较少用在大规模吞吐的场景中 用于大规模吞吐、复杂业务中。适合对可靠性要求很高的场景。适合金融互联网（特别是电商的大量交易涌入，后端无法及时处理的情况）。在阿里双11已经经历了多次考验。 主要追求高吞吐量、高速度与持久化。主要用于处理活跃的流式数据，大数据量的数据处理上。适合日志采集，数据采集。在大数据的实时计算和日志采集中被大规模使用，是业界的标准"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-27T09:32:16.000Z"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-01-27T09:32:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息队列对比\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-27T09:32:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Kafka、ActiveMQ、RabbitMQ、RocketMQ","slug":"kafka、activemq、rabbitmq、rocketmq","link":"#kafka、activemq、rabbitmq、rocketmq","children":[]},{"level":2,"title":"功能对比","slug":"功能对比","link":"#功能对比","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":2,"title":"基础对比","slug":"基础对比","link":"#基础对比","children":[]},{"level":2,"title":"可用性与可靠性对比","slug":"可用性与可靠性对比","link":"#可用性与可靠性对比","children":[]},{"level":2,"title":"运维对比","slug":"运维对比","link":"#运维对比","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1706347936000,"updatedTime":1706347936000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":1}]},"readingTime":{"minutes":11.16,"words":3349},"filePathRelative":"home/技术选型/技术栈对比/消息队列对比.md","localizedDate":"2024年1月27日","excerpt":"<h2> Kafka、ActiveMQ、RabbitMQ、RocketMQ</h2>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th><strong>RabbitMQ</strong></th>\\n<th><strong>ActiveMQ</strong></th>\\n<th><strong>RocketMQ</strong></th>\\n<th><strong>Kafka</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>公司/社区</strong></td>\\n<td>Rabbit</td>\\n<td>Apache</td>\\n<td>阿里</td>\\n<td>Apache</td>\\n</tr>\\n<tr>\\n<td><strong>开发语言</strong></td>\\n<td>Erlang</td>\\n<td>Java</td>\\n<td>Java</td>\\n<td>Scala&amp;Java</td>\\n</tr>\\n<tr>\\n<td><strong>协议支持</strong></td>\\n<td>AMQP</td>\\n<td>OpenWire、STOMP、REST、XMPP、AMQP</td>\\n<td>自定义</td>\\n<td>自定义协议，社区封装了http协议支持</td>\\n</tr>\\n<tr>\\n<td><strong>客户端支持语言</strong></td>\\n<td>官方支持Erlang、Java、Ruby等，社区查出多种API，几乎支持所有语言</td>\\n<td>Java、C、C++、Python、PHPPerl、.net等</td>\\n<td>Java、C++(不成熟)</td>\\n<td>官方支持Java，社区产出多种API，如PHP，Python等</td>\\n</tr>\\n<tr>\\n<td><strong>单机吞吐量</strong></td>\\n<td>万级（5.95w/s）。 为保证消息可靠性在吞吐量上做了取舍。</td>\\n<td>万级</td>\\n<td>十万级（11.6w/s）</td>\\n<td>十万级（17.3w/s）</td>\\n</tr>\\n<tr>\\n<td><strong>消息延迟/时效性</strong></td>\\n<td>微秒级。 RabbitMQ的一大特点，延迟最低。</td>\\n<td>毫秒级</td>\\n<td>毫秒级</td>\\n<td>毫秒以内</td>\\n</tr>\\n<tr>\\n<td><strong>可用性</strong></td>\\n<td>高，基于主从架构实现可用性</td>\\n<td>高，基于主从架构实现可用性</td>\\n<td>非常高，分布式架构</td>\\n<td>非常高，分布式架构，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>\\n</tr>\\n<tr>\\n<td><strong>消息可靠性</strong></td>\\n<td>经过参数优化配置，可以做到0丢失</td>\\n<td>有较低的概率丢失数据</td>\\n<td>经过参数优化配置，可以做到0丢失</td>\\n<td>经过参数优化配置，可以做到0丢失</td>\\n</tr>\\n<tr>\\n<td><strong>性能的稳定性</strong></td>\\n<td>消息堆积时，性能不稳定、明显下降</td>\\n<td></td>\\n<td>队列较多、消息堆积时性能稳定</td>\\n<td>队列/分区多时性能不稳定，明显下降。消息堆积时性能稳定</td>\\n</tr>\\n<tr>\\n<td><strong>功能支持</strong></td>\\n<td>基于erlang开发，所以并发性能极强，性能极好，延时低</td>\\n<td>MQ领域的功能极其完备</td>\\n<td>MQ功能较为完备，分布式扩展性好</td>\\n<td>功能较为简单，主要支持加单MQ功能</td>\\n</tr>\\n<tr>\\n<td><strong>优势</strong></td>\\n<td>erlang语言开发，性能极好、延时很低，吞吐量万级、MQ功能完备，管理界面非常好，社区活跃；互联网公司使用较多</td>\\n<td>非常成熟，功能强大，在业内大量公司和项目中都有应用</td>\\n<td>接口简单易用，阿里出品有保障，吞吐量大，分布式扩展方便、社区比较活跃，支持大规模的Topic、支持复杂的业务场景，可以基于源码进行定制开发。</td>\\n<td>超高吞吐量，ms级的时延，极高的可用性和可靠性，分布式扩展方便</td>\\n</tr>\\n<tr>\\n<td><strong>劣势</strong></td>\\n<td>吞吐量较低，erlang语音开发不容易进行定制开发，集群动态扩展麻烦</td>\\n<td>偶尔有较低概率丢失消息，社区活跃度不高</td>\\n<td>接口不是按照标准JMS规范走的，有的系统迁移要修改大量的代码，技术有被抛弃的风险</td>\\n<td>有可能进行消息的重复消费</td>\\n</tr>\\n<tr>\\n<td><strong>应用/使用场景</strong></td>\\n<td>适合对可靠性和实时性要求高，对速度要求不高的场景。适合小公司。</td>\\n<td>主要用于解耦和异步，较少用在大规模吞吐的场景中</td>\\n<td>用于大规模吞吐、复杂业务中。适合对可靠性要求很高的场景。适合金融互联网（特别是电商的大量交易涌入，后端无法及时处理的情况）。在阿里双11已经经历了多次考验。</td>\\n<td>主要追求高吞吐量、高速度与持久化。主要用于处理活跃的流式数据，大数据量的数据处理上。适合日志采集，数据采集。在大数据的实时计算和日志采集中被大规模使用，是业界的标准</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
