import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,d as t}from"./app-AuAuVshg.js";const p="/assets/类加载器实现热部署-ieb2f5rH.png",e={},o=t(`<h2 id="一、类加载器相关概念" tabindex="-1"><a class="header-anchor" href="#一、类加载器相关概念" aria-hidden="true">#</a> 一、类加载器相关概念</h2><h3 id="_1-classloader的作用" tabindex="-1"><a class="header-anchor" href="#_1-classloader的作用" aria-hidden="true">#</a> 1.ClassLoader的作用</h3><p>ClassLoader是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader负责通过各种方式将Class信息的二进制数据流读入JVM内部，转换为一个与目标类对应的java.lang.Class对象实例。然后交给Java虚拟机进行连接、初始化等操作。因此，ClassLoader在整个装载阶段，只能影响到类的加载，而无法通过ClassLoader去改变类的连接和初始化行为，至于它是否可以运行，则有Execution Engine决定。</p><h3 id="_2-类加载的分类" tabindex="-1"><a class="header-anchor" href="#_2-类加载的分类" aria-hidden="true">#</a> 2.类加载的分类</h3><p>类的加载可以分为显示加载vs隐式加载。</p><p>显示加载：是指在代码中显示使用Class.forName()，或者ClassLoader.loaderClass()加载class。 隐式加载：是指A类中引用了B类（import）则在A类加载时会隐式加载B类。</p><h3 id="_3-类加载器的必要性" tabindex="-1"><a class="header-anchor" href="#_3-类加载器的必要性" aria-hidden="true">#</a> 3.类加载器的必要性</h3><p>一般情况下，Java开发人员并不需要在程序中显示的使用类加载器，但是了解类加载器的加载机制至关重要。</p><p>避免开发中遇到java.lang.ClassNotFoundException异常或java.lang.NoClassDefFoundError异常时手足无措。只有了解类加载器的加载机制才能在出现异常时快速定位问题。 ClassNotfoundException和NoClassDefFoundError两者的本质区别就是： ClassNotfoundException是在编译时JVM加载不到类或者找不到类导致的，而NoClassDefFoundError是在运行时JVM加载不到类或者找不到类。 NoClassDefFoundError出现举例：在父类加载器加载的A类中调用了子类加载器加载的B类，B类对父类加载器不可见，此时会出现NoClassDefFoundError。 需要支持类的动态加载或者需要对编译后的字节码进行加密解密操作时，就需要和类加载器打交道了。注：源码之下无秘密，在Java的类加载器层面上处理加密解密还是比较容易被破解的，建议使用openjdk重写defineClass1的native实现完成解密操作，这样相对于在Java层面上更安全一些。 开发人员可以在程序编写自定义类加载器来重新定义加载规则。</p><h3 id="_4-命名空间" tabindex="-1"><a class="header-anchor" href="#_4-命名空间" aria-hidden="true">#</a> 4.命名空间</h3><p>命名空间总结：定义类加载器和类本身一同确定其在虚拟机中的唯一性。</p><p>①.何为类的唯一性 对于任意一个类，都需要由加载他的类加载器和这个类本身一同确认其在Java虚拟机中的唯一性。每一个类加载器，都拥有一个独立的命令空间：比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提下才有意义。否则，即便这两个类源自同一个class文件，被同一个虚拟机加载，只要他们的类加载器不同，那这两个类就必定不相等。</p><p>②.命名空间 每个类加载器都有自己的命名空间，命名空间由该加载器及其所有的父加载器的类组成。 同一命名空间中，不会出现<strong>类完整名字</strong>（<mark>包括类的包名</mark>）相同的两个类。注：这必须是在双亲委派机制的前提下，例如：使用自定义类加载器调用findClass可以再次加载系统类加载器加载过的类，但是一个类加载器不能重复使用findClass加载一个类两次。不考虑双亲委派的话应该说同一个类加载器加载的类中不会出现完整名字相同的两个类。 在不同的命名空间中有可能会出现类的完整名字相同的两个类。 ③.有关命名空间的例子 例子1：不同类加载器加载的同一个class文件会产生两个Class对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyClassLoader</span> myClassloader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MyClassLoader</span> myClassloader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 主要此处不能用loadClass，使用loadClass就会由系统类加载器去加载target下的User.class了</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> userClass2 <span class="token operator">=</span> myClassloader1<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.jef.entity.User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> userClass1 <span class="token operator">=</span> myClassloader2<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.jef.entity.User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userClass2 <span class="token operator">==</span> userClass1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;userClass1的类加载器是&quot;</span> <span class="token operator">+</span> userClass1<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;userClass2的类加载器是&quot;</span> <span class="token operator">+</span> userClass2<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><blockquote><p>false userClass1的类加载器是com.jef.clazz.MyClassLoader@57c758ac userClass2的类加载器是com.jef.clazz.MyClassLoader@2667f029</p></blockquote><p>例子2：打破双亲委派的情况下，MyClassLoader可以加载系统类加载器已经加载过的类（定义类加载器和类本身一同确定其在虚拟机中的唯一性，下面情况由于打破了双亲委托致使定义类加载器不同，所以不足以确定类的唯一性）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Field</span> classes <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;classes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
classes<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MyClassLoader</span> myClassloader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用loadClass会遵循双亲委派机制最终由系统类加载器加载User类</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> userClass1 <span class="token operator">=</span> myClassloader1<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.jef.entity.User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;************打印系统类加载器加载的类******************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Vector</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token punctuation">)</span> classes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myClassloader1<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//            System.out.println(o);</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;************打印MyClassloader加载器加载的类****************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Vector</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token punctuation">)</span> classes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myClassloader1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> userClass2 <span class="token operator">=</span> myClassloader1<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.jef.entity.User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userClass2 <span class="token operator">==</span> userClass1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;userClass1的类加载器是&quot;</span> <span class="token operator">+</span> userClass1<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;userClass2的类加载器是&quot;</span> <span class="token operator">+</span> userClass2<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;************再次打印系统类加载器加载的类******************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Vector</span> aa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token punctuation">)</span> classes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myClassloader1<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> aa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//            System.out.println(o);</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;************再次打印MyClassloader加载器加载的类****************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Vector</span> bb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token punctuation">)</span> classes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myClassloader1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> bb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><blockquote><p><strong><strong><strong><strong><strong><strong>打印系统类加载器加载的类</strong></strong></strong></strong></strong></strong>****** <strong><strong><strong><strong><strong><strong>打印MyClassloader加载器加载的类</strong></strong></strong></strong></strong></strong>**** false userClass1的类加载器是sun.misc.Launcher$AppClassLoader@18b4aac2 userClass2的类加载器是com.jef.clazz.MyClassLoader@64cd705f <strong><strong><strong><strong><strong><strong>再次打印系统类加载器加载的类</strong></strong></strong></strong></strong></strong>****** <strong><strong><strong><strong><strong><strong>再次打印MyClassloader加载器加载的类</strong></strong></strong></strong></strong></strong>**** class com.jef.entity.User</p></blockquote><p>例子3：即便打破双亲委派机制，同一个类加载器也不能加载同一个类两次</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
 * 即便打破双亲委派机制，同一个类加载器也不能加载同一个类两次
 */
MyClassLoader myClassloader1 = new MyClassLoader(path);
// 主要此处不能用loadClass，使用loadClass会遵循双亲委派机制userClass2不会真正加载而是直接被赋予userClass1的引用
Class&lt;?&gt; userClass1 = myClassloader1.findClass(&quot;com.jef.entity.User&quot;);
Class&lt;?&gt; userClass2 = myClassloader1.findClass(&quot;com.jef.entity.User&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果（出现LinkageError异常）：</p><blockquote><p>java.lang.LinkageError: loader (instance of com/jef/clazz/MyClassLoader): attempted duplicate class definition for name: &quot;com/jef/entity/User&quot;</p></blockquote><h3 id="_5-类加载机制的基本特征" tabindex="-1"><a class="header-anchor" href="#_5-类加载机制的基本特征" aria-hidden="true">#</a> 5.类加载机制的基本特征</h3><p>双亲委派模型。但是不是所有类加载都遵守这个模型，有时候，启动类加载器所加载的类型，是可能需要加载用户代码的比如SIP机制，具体如JDBC的驱动发现等，在这种情况下就不会用双亲委派模型去加载了，而是利用线程上下文类加载器去打破它（默认的线程上下文类加载器就是系统类加载器）。 可见性，子类加载器可以访问父类加载器加载的类型，但是反过来是不被允许的。 单一性，由于父加载器加载的类对于子类加载器是可见的，所以父加载器中加载过的类型，就不会再子加载器中重复加载。但是类加载器&quot;邻居&quot;间（MyClassLoader的两个实例），同一类型可以被多次加载，因为互相并不可见。</p><h2 id="二、类加载器分类-java8" tabindex="-1"><a class="header-anchor" href="#二、类加载器分类-java8" aria-hidden="true">#</a> 二、类加载器分类（Java8）</h2><p>JVM支持两种类型的类加载器，分别为引导类加载器（Bootstrap ClassLoader）和自定义类加载器。 从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生与抽象类CLassLoader的类加载器都划分为自定义类加载器所有扩展类加载器和系统类加载器都算自定义类加载器。无论类加载器的类型如何划分，在程序中我们最常见的类加载器结构主要情况如下：</p><h3 id="_1-启动类加载器" tabindex="-1"><a class="header-anchor" href="#_1-启动类加载器" aria-hidden="true">#</a> 1.启动类加载器</h3><ul><li>也叫引导类加载器。</li><li>这个类是由C/C++语言实现的，嵌套在JVM内部。</li><li>它用加载Java的核心类库（<strong>JAVA_HOME/jre/lib/<mark>rt.jar</mark><strong>或</strong>sun.boot.class.path</strong>路径下的内容），用于提供JVM自身需要的类。</li><li>并不继承自java.lang.ClassLoader，没有父类加载器</li><li>出于安全考虑，Bootstrap启动类加载器只能加载包名为java、javax、sun等开头的类</li><li>加载扩展类加载器和应用程序类加载器，并指定为他们的父类加载器</li><li>在Java代码中没有具体实现，通常用null代表</li></ul><h3 id="_2-扩展类加载器" tabindex="-1"><a class="header-anchor" href="#_2-扩展类加载器" aria-hidden="true">#</a> 2.扩展类加载器</h3><ul><li>JAVA语言编写，由sun.misc.Launcher$ExtClassLoader实现。</li><li>继承与ClassLoader类。</li><li>父类加载器为Bootstrap启动类加载器。</li><li>从<strong>java.ext.dirs</strong>系统属性所指定的目录中加载类库，或从JDK的安装目录的<strong>jre/lib/ext</strong>子目录下加载类库，如果用户创建的jar放在此目录下，也可以由扩展类加载器加载到。</li></ul><h3 id="_3-应用程序加载器" tabindex="-1"><a class="header-anchor" href="#_3-应用程序加载器" aria-hidden="true">#</a> 3.应用程序加载器</h3><ul><li>也叫 <strong>系统类加载器</strong></li><li>Java语言编写，由sun.misc.launcher$AppClassLoader实现</li><li>继承与ClassLoader类</li><li>父类加载器是启动类加载器</li><li>它负责加载环境变量<mark><strong>classpath</strong></mark>或系统属性<strong>java.class.path</strong>指定路径下的<strong>类库</strong></li><li>应用程序中的类加载器默认是系统类加载器</li><li>它是用户自定义类加载器的默认父加载器</li><li>通过<code>ClassLoader.getSystemClassLoader()</code>方法可以获取该类加载器</li></ul><h3 id="_4-数组的类加载器-补充" tabindex="-1"><a class="header-anchor" href="#_4-数组的类加载器-补充" aria-hidden="true">#</a> 4.数组的类加载器（补充）</h3><p>数组的Class对象，不是由类加载器去创建的，而是Java运行期JVM根据需要自动创建的，数组类的Class.getClassLoader()返回的类加载器与数组中元素类型的类加载器是一样的，如果数组中是基本数据类型则没有类加载器，如果是String、Integer、Long等引用类型则为Bootstrap类加载器，如果是User等自定义的引用类型则为系统类加载器。</p><p>注：基本数据类型由虚拟机预先定义不需要类加载，不需要类加载器；引用数据类型则需要进行类加载，需要类加载器</p><p>5.初始类加载器和定义类加载器（补充） 不说废话直接上代码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class User {
    static {
        Dog dog = new Dog();
        System.out.println(&quot;我有一只小狗,他的初始类加载器是&quot; + User.class.getClassLoader() + &quot;,他的定义类加载器是&quot; + dog.getClass().getClassLoader());
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MyClassLoader myClassLoader = new MyClassLoader(path);
Class&lt;?&gt; aClass = myClassLoader.findClass(&quot;com.jef.entity.User&quot;);
Object o = aClass.newInstance();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><blockquote><p>我有一只小狗,他的初始类加载器是com.jef.clazz.MyClassLoader@64cd705f,他的定义类加载器是sun.misc.Launcher$AppClassLoader@18b4aac2</p></blockquote><p>因为Dog在User中被引用触发隐式加载所以User的类加载器是Dog的初始类加载器，有由于双亲委派机制的存在最终加载Dog的类是系统类加载器，所以系统类加载器是Dog类的定义类加载器。</p><h2 id="三、双亲委派机制" tabindex="-1"><a class="header-anchor" href="#三、双亲委派机制" aria-hidden="true">#</a> 三、双亲委派机制</h2><p>首先这里的&quot;双亲&quot;并不是指真正的父类，子类加载器和父类加载器直接不是继承关系，而且子类加载器里面有个父类加载器的引用存放于parent变量中，从而子类加载器可以间接访问父类加载器加载的类以及父类加载器的属性和方法。</p><h3 id="_1-定义与本质" tabindex="-1"><a class="header-anchor" href="#_1-定义与本质" aria-hidden="true">#</a> 1.定义与本质</h3><p><strong>一个类加载器在接到一个类加载请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成这个加载任务就成功返回，只有父类加载器不能完成加载任务时，才会自己去加载。</strong></p><h3 id="_2-优势" tabindex="-1"><a class="header-anchor" href="#_2-优势" aria-hidden="true">#</a> 2.优势</h3><p>避免类的重复加载，确保一个类的全局唯一性。 保护程序安全，防止核心API被随意修改。在双亲委派机制下Java的核心类库始终由Bootstrap启动类加载器加载，不会被系统类加载器加载，避免了全类名冲突恶意覆盖行为。 ①代码支持（见LoaderClass源码分析）</p><ol><li>先在当前类加载器的缓存中查找有无目标类，如果有直接返回。</li><li>判断当前类加载器的<strong>父类加载器</strong>是否为空，如果不为空则递归调用parent.loadClass()进行加载。</li><li>相反，如果当前类加载器为空，则调用findBootstrapClassOrNull()方法让启动类加载器进行加载。</li><li>如果以上3条路径都未加载成功，则调用findClass进行加载，改方法最后调用definClass系列的native方法加载目标Java类。</li></ol><p>②思考 如果在自定义类加载器中重新loaderClass()或直接用findClass()加载等方式打破双亲委派机制，此时来加载自定义的java.lang.String类能否加载成功破坏核心类库呢？ 答案是否定的，因为JDK自定义的类加载器在加载类的最后一不都会调用defineClass(String, byte[], int, int, ProtectionDomain)方法，该方法会执行preDefineClass()方法，此方法中对核心类库进行了安全检查。</p><p>3.劣势 双亲委派机制的最大缺点在于检查类是否加载的过程是单向的，这个方式虽然从结构上比较清晰，使各个ClassLoader的职责非常明确，但是使得顶层的ClassLoader无法访问底层ClassLoader加载的类。</p><p>4.破坏双亲委托机制 ①JDK1.2之前 双亲委派模型是在jdk1.2之后引入的，之前自然不存在。</p><p>②线程上下文类加载器 对SPI不了解的可以看下：Java的SPI机制。在SPI服务机制中就要求JDK核心类库rt.jar中的代码去调用classpath下面代码，而rt.jar中的代码的定义类加载器是Bootstrap启动类加载器，是绝对加载不到classpath中的类的，此时为了打破这个僵局推出了线程上下文类加载器，这个类加载器可以通过java.lang.Thread类的setContextClassLoader()方法进行设置，如果线程创建时未设置它将会从父线程中继承一个，如果在应用程序的全局范围内都未设置过的话，那么这个类加载器的默认就是应用程序类加载器。</p><p>③代码热替换、模块热部署 想要实现代码的热替换必须要打破双亲委派模型使用自定义的类加载器才行，比较成熟的技术有OSGI有兴趣可以自行百度一下，下面我举一个比较简单代码热替换例子。</p><p>王厨师做一道回锅肉做完后发现忘记放肉了，然后抓紧将肉加进去。直接上代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 王厨师
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cook_wang</span> <span class="token keyword">implements</span> <span class="token class-name">Cook</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;这是一道回锅肉材料有：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;葱、&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;辣椒、&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;醋、&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;锅&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
     
<span class="token doc-comment comment">/**
  * 厨师接口
  */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cook</span> <span class="token punctuation">{</span>
   <span class="token keyword">void</span> <span class="token function">cooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 工厂容器
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBeanFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;E:\\\\Desktop\\\\MyGet\\\\java-jdk\\\\target\\\\classes\\\\&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> beanList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SpringBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">MyClassLoader</span> myClassLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 这里就暂且只加载王厨师了，实战是应加载全部类</span>
                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> myClassLoader<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.jef.clazz.Cook_wang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        beanList<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Cook</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> beanList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">T</span> cast <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cast<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 热部署测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotDeployTest</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化容器</span>
        <span class="token class-name">SpringBeanFactory</span> springBeanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Cook</span> bean <span class="token operator">=</span> springBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Cook</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bean<span class="token punctuation">.</span><span class="token function">cooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序打印：</p><blockquote><p>这是一道回锅肉材料有：葱、辣椒、醋、锅</p><p>这是一道回锅肉材料有：葱、辣椒、醋、锅</p><p>这是一道回锅肉材料有：葱、辣椒、醋、锅</p></blockquote><p>王厨师添加了肉后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 王厨师
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cook_wang</span> <span class="token keyword">implements</span> <span class="token class-name">Cook</span> <span class="token punctuation">{</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 急忙补上肉</span>
       <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;这是一道回锅肉材料有：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;葱、&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;辣椒、&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;醋、&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;锅、&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;肉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时程序继续运行打印：</p><blockquote><p>这是一道回锅肉材料有：葱、辣椒、醋、锅、肉</p><p>这是一道回锅肉材料有：葱、辣椒、醋、锅、肉</p></blockquote><figure><img src="`+p+`" alt="类加载器实现热部署" tabindex="0" loading="lazy"><figcaption>类加载器实现热部署</figcaption></figure><p>代码热替换成功</p><h2 id="四、classloader源码解析" tabindex="-1"><a class="header-anchor" href="#四、classloader源码解析" aria-hidden="true">#</a> 四、ClassLoader源码解析</h2><h3 id="_1-loaderclass" tabindex="-1"><a class="header-anchor" href="#_1-loaderclass" aria-hidden="true">#</a> 1.<strong>loaderClass</strong></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第二个参数是是否进行解析的意思，默认不进行解析</span>
    <span class="token keyword">return</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span>
<span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查看该类是否已经被加载过，如果已经被加载过则直接返回（优先检查定义类加载器是否加载过）</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果该类从未加载过，则判断当前类加载器的父类加载器是否为null</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// 如果父类加载器不为null，则直接委托父类加载器来加载，递归调用loadClass()</span>
                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
               <span class="token comment">// 如果父类加载器为null，说明该加载器为ExtClassLoader扩展类加载器，此时调用Bootstrap启动类加载器进行加载</span>
                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// ClassNotFoundException thrown if class not found</span>
                <span class="token comment">// from the non-null parent class loader</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 父类加载器也不能加载，此时调用findClass自己进行加载</span>
                <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// this is the defining class loader; record the stats</span>
                <span class="token class-name">PerfCounter</span><span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-findclass" tabindex="-1"><a class="header-anchor" href="#_2-findclass" aria-hidden="true">#</a> 2.<strong>findClass</strong></h3><p>findClass方法在自定义类加载器是官方推荐的重新方法，此方法主要完成的工作是根据类的全限定名通过各种途径获取改类对于class文件的数据流并输出位byte[]字节数组，最后调用defineClass系列重载方法加载改类。</p><h3 id="_3-defineclass" tabindex="-1"><a class="header-anchor" href="#_3-defineclass" aria-hidden="true">#</a> 3.<strong>defineClass</strong></h3><p><strong>定义类</strong>，defineClass系列重载方法最后都会调用defineClass(String name, byte[] b, int off, int len, ProtectionDomain protectionDomain)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span>
                                         <span class="token class-name">ProtectionDomain</span> protectionDomain<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">ClassFormatError</span>
<span class="token punctuation">{</span>
    protectionDomain <span class="token operator">=</span> <span class="token function">preDefineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> protectionDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> source <span class="token operator">=</span> <span class="token function">defineClassSourceLocation</span><span class="token punctuation">(</span>protectionDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token function">defineClass1</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">,</span> protectionDomain<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">postDefineClass</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> protectionDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后会调用本地方法defineClass1来加载该类获取Class实例，想要继续深入JVM源码探究的可以看下<strong>类加载时JVM在干什么，源码分析</strong>。</p><h3 id="_4-predefineclass" tabindex="-1"><a class="header-anchor" href="#_4-predefineclass" aria-hidden="true">#</a> 4.<strong>preDefineClass</strong></h3><p>对要加载的class的全限定名进行<strong>检查</strong>，以java开头的类会直接抛出异常，防止核心API被篡改。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ProtectionDomain</span> <span class="token function">preDefineClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span>
                                            <span class="token class-name">ProtectionDomain</span> pd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span><span class="token string">&quot;IllegalName: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias</span>
    <span class="token comment">// relies on the fact that spoofing is impossible if a class has a name</span>
    <span class="token comment">// of the form &quot;java.*&quot;</span>
    <span class="token comment">// 检查是否已java开头</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;java.&quot;</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token function">getBuiltinPlatformClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span>
            <span class="token punctuation">(</span><span class="token string">&quot;Prohibited package name: &quot;</span> <span class="token operator">+</span>
             name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pd <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pd <span class="token operator">=</span> defaultDomain<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">checkCerts</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pd<span class="token punctuation">.</span><span class="token function">getCodeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> pd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、自定义类加载器" tabindex="-1"><a class="header-anchor" href="#五、自定义类加载器" aria-hidden="true">#</a> 五、自定义类加载器</h2><p>在没有特殊情况下自定义类加载器官方建议保留双亲委派机制，重写findClass方法即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 自定义类加载器
 *
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> path<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1<span class="token punctuation">;</span>
        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将.换成/</span>
            <span class="token class-name">String</span> classFilePath <span class="token operator">=</span> path <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.class&quot;</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取.class文件的输入流</span>
            fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>classFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 获取.class文件的字节数组</span>
            bytes1 <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>byteArrayOutputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 调用defineClass加载该类</span>
        <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bytes1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、java9有关类加载器的变化" tabindex="-1"><a class="header-anchor" href="#六、java9有关类加载器的变化" aria-hidden="true">#</a> 六、Java9有关类加载器的变化</h2><ul><li>在jdk9中移除了扩展类加载器，新增了平台类加载器代替原先扩展类加载器的位置。</li><li>启动类加载器新增了对应的Java实现类BootClassLoader，但为了向前兼容在获取启动加载器时还是会返回null。</li><li>系统类加载器的实现有原先的<code>sun.misc.launcher$AppClassLoader</code>换成了<code>jdk.internal.loader.ClassLoaders$AppClassLoader</code></li><li>移除了URLCLassLoader，所以之前版本自定义类加载器是如果直接继承了URLClassLoader的话在新的JDK9的环境下无法运行</li><li>双亲委派机制在，委派给父类之前，先根据包名判断该类是否能够确定归属与某个类加载器，如果定义这个归属关系则直接由归属类加载器加载。</li></ul>`,84),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","类加载器.html.vue"]]);export{d as default};
