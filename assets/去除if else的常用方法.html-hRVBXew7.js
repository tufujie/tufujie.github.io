const e=JSON.parse('{"key":"v-a65d07dc","path":"/home/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/%E5%8E%BB%E9%99%A4if%20else%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.html","title":"去除if else的常用方法","lang":"zh-CN","frontmatter":{"title":"去除if else的常用方法","description":"如果代码中存在大量的条件判断语句，可以使用下面一些方法来替换这些条件表达式，使代码更加简洁、易于维护和扩展。 接口和实现 把条件模块抽象为一个公共的接口，策略接口 public interface ICustomerStrategy { double calcPrice(Customer customer); /** * 获取客户类型 * * @return */ String getCustomerType(); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/%E5%8E%BB%E9%99%A4if%20else%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"去除if else的常用方法"}],["meta",{"property":"og:description","content":"如果代码中存在大量的条件判断语句，可以使用下面一些方法来替换这些条件表达式，使代码更加简洁、易于维护和扩展。 接口和实现 把条件模块抽象为一个公共的接口，策略接口 public interface ICustomerStrategy { double calcPrice(Customer customer); /** * 获取客户类型 * * @return */ String getCustomerType(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-11T11:16:40.000Z"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-01-11T11:16:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"去除if else的常用方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-11T11:16:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"提前 return","slug":"提前-return","link":"#提前-return","children":[]},{"level":2,"title":"梳理优化判断逻辑","slug":"梳理优化判断逻辑","link":"#梳理优化判断逻辑","children":[]},{"level":2,"title":"三元运算符","slug":"三元运算符","link":"#三元运算符","children":[]},{"level":2,"title":"合并条件表达式","slug":"合并条件表达式","link":"#合并条件表达式","children":[]},{"level":2,"title":"Optional 判空","slug":"optional-判空","link":"#optional-判空","children":[]},{"level":2,"title":"Map表驱动法","slug":"map表驱动法","link":"#map表驱动法","children":[]},{"level":2,"title":"选择性的使用switch","slug":"选择性的使用switch","link":"#选择性的使用switch","children":[]},{"level":2,"title":"使用多态","slug":"使用多态","link":"#使用多态","children":[]},{"level":2,"title":"策略模式 + 工厂方法","slug":"策略模式-工厂方法","link":"#策略模式-工厂方法","children":[]},{"level":2,"title":"责任链模式","slug":"责任链模式","link":"#责任链模式","children":[]},{"level":2,"title":"枚举-推荐","slug":"枚举-推荐","link":"#枚举-推荐","children":[{"level":3,"title":"Server","slug":"server","link":"#server","children":[]},{"level":3,"title":"Client","slug":"client","link":"#client","children":[]}]},{"level":2,"title":"Spring-推荐","slug":"spring-推荐","link":"#spring-推荐","children":[{"level":3,"title":"Server","slug":"server-1","link":"#server-1","children":[]},{"level":3,"title":"Client","slug":"client-1","link":"#client-1","children":[]}]}],"git":{"createdTime":1703587259000,"updatedTime":1704971800000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":3}]},"readingTime":{"minutes":6.53,"words":1959},"filePathRelative":"home/代码优化/去除if else的常用方法.md","localizedDate":"2023年12月26日","excerpt":"<p>如果代码中存在大量的条件判断语句，可以使用下面一些方法来替换这些条件表达式，使代码更加简洁、易于维护和扩展。</p>\\n<p><mark>接口和实现</mark></p>\\n<p><strong>把条件模块抽象为一个公共的接口，策略接口</strong></p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">ICustomerStrategy</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">double</span> <span class=\\"token function\\">calcPrice</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Customer</span> customer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    \\n     <span class=\\"token doc-comment comment\\">/**\\n     * 获取客户类型\\n     *\\n     * <span class=\\"token keyword\\">@return</span>\\n     */</span>\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getCustomerType</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
