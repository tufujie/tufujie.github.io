import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as n,c as o,e as h,w as s,b as a,d as e}from"./app-AuAuVshg.js";const i={},c=e('<h2 id="params" tabindex="-1"><a class="header-anchor" href="#params" aria-hidden="true">#</a> Params</h2><p>点击Params，输入参数及value，value不可以是json，可输入多个，即时显示在URL链接上。 响应示例：这里会有请求的响应状态码，响应时间，以及响应大小 响应体示例：响应的格式可以有多种，一般情况下，我们自定义接口的话是 json格式的响应体</p><h2 id="body" tabindex="-1"><a class="header-anchor" href="#body" aria-hidden="true">#</a> Body</h2><h3 id="form-data" tabindex="-1"><a class="header-anchor" href="#form-data" aria-hidden="true">#</a> form-data</h3><p>表单提交，value可以是json</p><p>请求头是根据请求参数的形式自动生成的，请求头中的Content-Type与请求参数的格式之间是有关联关系，为：multipart/form-data</p><h3 id="x-www-form-urlencoded" tabindex="-1"><a class="header-anchor" href="#x-www-form-urlencoded" aria-hidden="true">#</a> x-www-form-urlencoded</h3>',7),l=e('<p>请求头中的Content-Type与请求参数的格式之间是有关联关系，为：application/x-www-form-urlencoded</p><h3 id="raw" tabindex="-1"><a class="header-anchor" href="#raw" aria-hidden="true">#</a> raw</h3><h4 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> <mark>JSON</mark></h4><p>当我们选择JSON(application/json) 是会自动帮我们设置 headers 为 application/json</p><h4 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h4><h2 id="headers" tabindex="-1"><a class="header-anchor" href="#headers" aria-hidden="true">#</a> Headers</h2><p>请求头设置</p><h2 id="authorizaton" tabindex="-1"><a class="header-anchor" href="#authorizaton" aria-hidden="true">#</a> Authorizaton</h2><p>认证，有些请求是需要用账号密码认证的</p><h2 id="快捷键" tabindex="-1"><a class="header-anchor" href="#快捷键" aria-hidden="true">#</a> 快捷键</h2><p><strong>Ctrl + O</strong>，打开弹框，支持cURL输入</p><p><strong>Ctrl + Enter</strong>，发送请求</p><p><strong>Ctrl + Shift + S</strong>，另存请求为</p>',13);function p(m,f){const r=d("marK");return n(),o("div",null,[c,h(r,null,{default:s(()=>[a("加密形式form表单")]),_:1}),a("，value可以是json "),l])}const _=t(i,[["render",p],["__file","Postman.html.vue"]]);export{_ as default};
