const t=JSON.parse('{"key":"v-71d6e138","path":"/home/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","title":"ArrayList源码分析","lang":"zh-CN","frontmatter":{"title":"ArrayList源码分析","description":"ArrayList 简介 ArrayList 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用ensureCapacity操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。 ArrayList 继承于 AbstractList ，实现了 List, RandomAccess, Cloneable, java.io.Serializable 这些接口。 public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable{ }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"ArrayList源码分析"}],["meta",{"property":"og:description","content":"ArrayList 简介 ArrayList 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用ensureCapacity操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。 ArrayList 继承于 AbstractList ，实现了 List, RandomAccess, Cloneable, java.io.Serializable 这些接口。 public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable{ }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-27T09:32:16.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"ArrayList源码分析"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-01-27T09:32:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ArrayList源码分析\\",\\"image\\":[\\"https://mister-hope.github.io/\\"],\\"dateModified\\":\\"2024-01-27T09:32:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"ArrayList 简介","slug":"arraylist-简介","link":"#arraylist-简介","children":[{"level":3,"title":"ArrayList 和 Vector 的区别?（了解即可)","slug":"arraylist-和-vector-的区别-了解即可","link":"#arraylist-和-vector-的区别-了解即可","children":[]},{"level":3,"title":"ArrayList 可以添加 null 值吗？","slug":"arraylist-可以添加-null-值吗","link":"#arraylist-可以添加-null-值吗","children":[]},{"level":3,"title":"Arraylist 与 LinkedList 区别?","slug":"arraylist-与-linkedlist-区别","link":"#arraylist-与-linkedlist-区别","children":[]}]},{"level":2,"title":"ArrayList 核心源码解读","slug":"arraylist-核心源码解读","link":"#arraylist-核心源码解读","children":[]},{"level":2,"title":"ArrayList 扩容机制分析","slug":"arraylist-扩容机制分析","link":"#arraylist-扩容机制分析","children":[{"level":3,"title":"先从 ArrayList 的构造函数说起","slug":"先从-arraylist-的构造函数说起","link":"#先从-arraylist-的构造函数说起","children":[]},{"level":3,"title":"一步一步分析 ArrayList 扩容机制","slug":"一步一步分析-arraylist-扩容机制","link":"#一步一步分析-arraylist-扩容机制","children":[]},{"level":3,"title":"System.arraycopy() 和 Arrays.copyOf()方法","slug":"system-arraycopy-和-arrays-copyof-方法","link":"#system-arraycopy-和-arrays-copyof-方法","children":[]},{"level":3,"title":"ensureCapacity方法","slug":"ensurecapacity方法","link":"#ensurecapacity方法","children":[]}]}],"git":{"createdTime":1706347936000,"updatedTime":1706347936000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":1}]},"readingTime":{"minutes":22.73,"words":6820},"filePathRelative":"home/源码分析/ArrayList源码分析.md","localizedDate":"2024年1月27日","excerpt":"<h2> ArrayList 简介</h2>\\n<p>ArrayList 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用ensureCapacity操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。\\nArrayList 继承于 AbstractList ，实现了 List, RandomAccess, Cloneable, java.io.Serializable 这些接口。</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;\\n        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable{\\n\\n  }\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
