import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as a,d as n}from"./app-AuAuVshg.js";const e="/assets/系统架构设计师59-BxPDuG0b.png",d="/assets/系统架构设计师60-gBtRmrm9.png",s="/assets/系统架构设计师61-nh4X5aPp.png",h="/assets/系统架构设计师62-f72VOBZd.jpg",p="/assets/系统架构设计师63-s-xIeKln.jpg",o="/assets/系统架构设计师64-00OQobZQ.jpg",i="/assets/系统架构设计师65-s1RUC5hU.jpg",g="/assets/系统架构设计师66-KbZu7b2t.png",c="/assets/系统架构设计师67-sckT3hKc.png",_="/assets/系统架构设计师68-ZCWINPhI.png",C={},l=n('<h2 id="_3-1-考情分析" tabindex="-1"><a class="header-anchor" href="#_3-1-考情分析" aria-hidden="true">#</a> <strong>3.1.考情分析</strong></h2><p>根据对历年的考试真题进行分析，本章要求考生掌握以下几个方面的知识：</p><p>（1） 了解 Flynn 分类法的概念。</p><p>（2） 了解CISC 与 RISC。</p><p>（3） 了解层次化存储、Cache 的概念，掌握主存计算题型，掌握磁盘存取时间、优化存储、移臂调度等题型。</p><p>（4） 了解总线的特点和分类。</p><p>（5） 掌握流水线计算。</p><p>（6） 了解校验码分类，掌握 CRC 编码过程。</p><p>（7） 了解嵌入式系统开发设计的概念。</p><p><strong>1.1本章重点</strong></p><table><thead><tr><th>序号</th><th>知识领域</th><th>知识点详情</th></tr></thead><tbody><tr><td>1</td><td>计算机体系结构分类（Flynn 分类法）</td><td>Flynn 分类法</td></tr><tr><td>1</td><td>CISC 与RISC（⭐）</td><td>CISC 与RISC（CISC：复杂指令集；RISC：精简指令集。）</td></tr><tr><td>1</td><td>存储系统（⭐⭐⭐⭐）</td><td>分级存储体系</td></tr><tr><td>2</td><td></td><td>Cache</td></tr><tr><td>3</td><td></td><td>主存/内存</td></tr><tr><td>4</td><td></td><td>磁盘结构与参数</td></tr><tr><td>1</td><td>总线系统（⭐⭐）</td><td>总线分类</td></tr><tr><td>2</td><td></td><td>总线特点</td></tr><tr><td>1</td><td>流水线（⭐⭐）</td><td>流水线</td></tr><tr><td>1</td><td>校验码（⭐）</td><td>校验码</td></tr><tr><td>1</td><td>嵌入式系统开发设计（⭐⭐⭐）</td><td>嵌入式核心部件</td></tr><tr><td>2</td><td></td><td>哈弗结构与冯·诺依曼结构对比</td></tr><tr><td>3</td><td></td><td>板级支持包（BSP，也称为硬件抽象层HAL）</td></tr><tr><td>4</td><td></td><td>交叉开发环境</td></tr><tr><td>5</td><td></td><td>嵌入式系统初始化过程</td></tr></tbody></table><h2 id="_3-2-考点精讲" tabindex="-1"><a class="header-anchor" href="#_3-2-考点精讲" aria-hidden="true">#</a> <strong>3.2.考点精讲</strong></h2><h3 id="_3-2-1-计算机体系结构分类-flynn分类法" tabindex="-1"><a class="header-anchor" href="#_3-2-1-计算机体系结构分类-flynn分类法" aria-hidden="true">#</a> <strong>3.2.1.计算机体系结构分类（Flynn分类法）</strong></h3><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-2-2-cisc与risc-⭐-cisc-复杂指令集-risc-精简指令集。" tabindex="-1"><a class="header-anchor" href="#_3-2-2-cisc与risc-⭐-cisc-复杂指令集-risc-精简指令集。" aria-hidden="true">#</a> <strong>3.2.2.CISC与RISC（⭐）（CISC：复杂指令集；RISC：精简指令集。）</strong></h3><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（1）CISC的特点</strong></p><p><strong>指令数量多，指令频率差别大，多寻址，使用微码。</strong></p><p><strong>（2）RISC的特点</strong></p><p><strong>指令数量少，操作寄存器，单周期，少寻址，多通用寄存器，硬布线逻辑控制，适用于流水线。</strong></p><p><strong>（3）RISC和CISC是目前设计制造微处理器的两种典型技术，虽然它们都试图在体系结构、操作运行、软件硬件、编译时间和运行时间等诸多因素中做出某种平衡，以求达到高效的目的，但采用的方法不同，主要区别有：</strong></p><p>① 指令系统：RISC 设计者把主要精力放在那些经常使用的指令上，尽量使它们具有简单高效的特色。对不常用的功能，常通过组合指令来完成。因此，在 RISC 机器上实现特殊功能时，效率可能较低。但可以利用流水技术和超标量技术加以改进和弥补。而CISC 计算机的指令系统比较丰富，有专用指令来完成特定的功能。因此，处理特殊任务效率较高。</p><p>② 存储器操作：RISC 对存储器操作有限制，使控制简单化；而CISC 机器的存储器操作指令多，操作直接。</p><p>③ 程序：RISC 汇编语言程序一般需要较大的内存空间，实现特殊功能时程序复杂，不易设计；而 CISC 汇编语言程序编程相对简单，科学计算及复杂操作的程序设计相对容易，效率较高。</p><p>④ 中断：RISC 机器在一条指令执行的适当地方可以响应中断；而 CISC 机器是在一条指令执行结束后响应中断。</p><p>⑤ CPU：RISC 的 CPU 包含有较少的单元电路，因而面积小、功耗低；而CISC CPU 包含有丰富的电路单元，因而功能强、面积大、功耗大。</p><p>⑥ 设计周期：RISC 微处理器结构简单，布局紧凑，设计周期短，且易于采用最新技术；CISC 微处理器结构复杂，设计周期长。</p><p>⑦ 用户使用：RISC 微处理器结构简单，指令规整，性能容易把握，易学易用；CISC 微处理器结构复杂，功能强大，实现特殊功能容易。</p><p>⑧ 应用范围：由于RISC 指令系统的确定与特定的应用领域有关，故RISC 机器更适合于专用机；而 CISC 机器则更适合于通用机。</p><h3 id="_3-2-3-存储系统-⭐⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#_3-2-3-存储系统-⭐⭐⭐⭐" aria-hidden="true">#</a> <strong>3.2.3.存储系统（⭐⭐⭐⭐）</strong></h3><h4 id="_3-2-3-1-分级存储体系概念" tabindex="-1"><a class="header-anchor" href="#_3-2-3-1-分级存储体系概念" aria-hidden="true">#</a> <strong>3.2.3.1.分级存储体系概念</strong></h4><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（1） 关于多级存储体系的分布；</p><p>（2） 关于多级存储体系不同层次的大小、速度、成本等对比；</p><p>（3） 关于多级存储体系的理论支持体系（局部性原理）。</p><p>**时间局部性：**指程序中的某条指令一旦执行，不久以后该指令可能再次执行，典型原因是由于程序中存在着大量的循环操作。</p><p>**空间局部性：**指一旦程序访问了某个存储单元，不久以后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址可能集中在一定的范围内，其典型情况是程序顺序执行。</p><p>**工作集理论：**工作集是进程运行时被频繁访问的页面集合。</p><h4 id="_3-2-3-2-cache" tabindex="-1"><a class="header-anchor" href="#_3-2-3-2-cache" aria-hidden="true">#</a> <strong>3.2.3.2.Cache</strong></h4><h5 id="_3-2-3-2-1-cache的相关概念-理论依据-局部性原理-大小、速度、成本等对比" tabindex="-1"><a class="header-anchor" href="#_3-2-3-2-1-cache的相关概念-理论依据-局部性原理-大小、速度、成本等对比" aria-hidden="true">#</a> 3.2.3.2.1. <strong>Cache的相关概念（理论依据（局部性原理），大小、速度、成本等对比）</strong></h5><p>Cache 的功能：提高CPU 数据输入输出的速率，突破冯·诺依曼瓶颈，即CPU 与存储系统间数据传送带宽限制。</p><p><strong>在计算机的存储系统体系中，Cache 是（除寄存器以外）访问速度最快的层次。</strong></p><p>使用Cache 改善系统性能的依据是程序的局部性原理。</p><p>如果以 h 代表对Cache 的访问命中率，t1 表示Cache 的周期时间，t2 表示主存储器周期时间，以读操作为例，使用“Cache+主存储器”的系统的平均周期为 t3，则：t3 = h×t1+(1-h)×t2</p><p>其中，（1-h）又称为失效率（未命中率）。</p><h5 id="_3-2-3-2-2-cache映射方式" tabindex="-1"><a class="header-anchor" href="#_3-2-3-2-2-cache映射方式" aria-hidden="true">#</a> 3.2.3.2.2. <strong>Cache映射方式</strong></h5><p><strong>直接相联映像</strong>：硬件电路较简单，但冲突率很高。</p><p><strong>全相联映像</strong>：电路难于设计和实现，只适用于小容量的 cache，冲突率较低。</p><p><strong>组相联映像</strong>：直接相联与全相联的折中。</p><h5 id="_3-2-3-2-3-cache页面淘汰算法" tabindex="-1"><a class="header-anchor" href="#_3-2-3-2-3-cache页面淘汰算法" aria-hidden="true">#</a> 3.2.3.2.3. <strong>Cache页面淘汰算法</strong></h5><p>随机算法</p><p>先进先出算法（FIFO）</p><p>近期最少使用算法（LRU）-- 计数器统计使用次数</p><h5 id="_3-2-3-2-4-cache的读写过程" tabindex="-1"><a class="header-anchor" href="#_3-2-3-2-4-cache的读写过程" aria-hidden="true">#</a> 3.2.3.2.4. <strong>Cache的读写过程</strong></h5><p>写直达：同时写Cache 与内存</p><p>写回：只写Cache，淘汰页面时，写回内存</p><p>标记法：只写入内存，并将标志位清 0，若用到此数据，需要再次调取</p><h4 id="_3-2-3-3-主存-内存" tabindex="-1"><a class="header-anchor" href="#_3-2-3-3-主存-内存" aria-hidden="true">#</a> <strong>3.2.3.3.主存</strong>/<strong>内存</strong></h4><h5 id="_3-2-3-3-1-分类" tabindex="-1"><a class="header-anchor" href="#_3-2-3-3-1-分类" aria-hidden="true">#</a> 3.2.3.3.1. <strong>分类</strong></h5><p><strong>相联存储器：按内容存取，如Cache。随机存取存储器</strong></p><p>DRAM（Dynamic RAM，动态 RAM）-SDRAM SRAM（Static RAM，静态）</p><p><strong>只读存储器</strong></p><p>MROM（Mask ROM，掩模式 ROM） PROM（Programmable ROM，一次可编程 ROM） EPROM（Erasable PROM，可擦除的 PROM）</p><p>闪速存储器（flash memory，闪存）</p><h5 id="_3-2-3-3-2-计算" tabindex="-1"><a class="header-anchor" href="#_3-2-3-3-2-计算" aria-hidden="true">#</a> 3.2.3.3.2. <strong>计算</strong></h5><p><strong>内存单元数计算</strong>：最大地址+1-最小地址</p><p><strong>内存总容量</strong>：按字节编址，内存单元数<em>8bit；按字编址，内存单元数</em>机器字长。<strong>已知芯片单位容量，求所用芯片的片数，总容量/单位容量；</strong></p><p><strong>已知所用芯片的片数，求取芯片单位容量，总容量/芯片片数。</strong></p><h4 id="_3-2-3-4-磁盘结构与参数" tabindex="-1"><a class="header-anchor" href="#_3-2-3-4-磁盘结构与参数" aria-hidden="true">#</a> <strong>3.2.3.4.磁盘结构与参数</strong></h4><p><img src="'+h+'" alt="" loading="lazy"> <img src="'+p+'" alt="" loading="lazy"></p><p>（1） <strong>存取时间=寻道时间+等待时间</strong>，寻道时间是指磁头移动到磁道所需的时间；等待时间为等待读写的扇区转到磁头下方所用的时间。有时还需要加上数据的传输时间。</p><p>（2） 在处理过程中，如果有关于<strong>缓冲区的使用</strong>，需要了解对于单缓冲区每次只能被一个进程使用，即向缓冲区传输数据的时候不能从缓冲区读取数据，反之亦然。</p><p>（3） 对于<strong>磁盘存储的优化</strong>，是因为磁头保持转动的状态，当读取数据传输或处理时，磁头会移动到超前的位置，需要继续旋转才能回到逻辑下一磁盘块，优化存储就是调整磁盘块的位置，让逻辑下一磁盘块放到磁头将要开始读取该逻辑块的位置。</p><p>（4） <strong>磁盘移臂调度算法</strong>：</p><p><strong>先来先服务 FCFS（谁先申请先服务谁）；</strong></p><p><strong>最短寻道时间优先SSTF（申请时判断与磁头当前位置的距离，谁短先服务谁）；扫描算法 SCAN（电梯算法，双向扫描）；</strong></p><p><strong>循环扫描 CSCAN（单向扫描）。</strong></p><h3 id="_3-2-4-总线系统-⭐⭐" tabindex="-1"><a class="header-anchor" href="#_3-2-4-总线系统-⭐⭐" aria-hidden="true">#</a> <strong>3.2.4.总线系统（⭐⭐）</strong></h3><h4 id="_3-2-4-1-总线分类" tabindex="-1"><a class="header-anchor" href="#_3-2-4-1-总线分类" aria-hidden="true">#</a> <strong>3.2.4.1.总线分类</strong></h4><p>（1） 数据总线（Data Bus）：在 CPU 与 RAM 之间来回传送需要处理或是需要储存的数据。</p><p>（2） 地址总线（Address Bus）：用来指定在 RAM（Random Access Memory）之中储存的数据的地址。</p><p>（3） 控制总线（Control Bus）：将微处理器控制单元（Control Unit）的信号，传送到周边设备，一般常见的为 USB Bus 和 1394 Bus。</p><h4 id="_3-2-4-2-总线特点" tabindex="-1"><a class="header-anchor" href="#_3-2-4-2-总线特点" aria-hidden="true">#</a> <strong>3.2.4.2.总线特点</strong></h4><p>（1） 一条总线同一时刻仅允许一个设备发送，但允许多个设备接收。</p><p>（2） 串行总线特点：</p><p>串行总线有半双工、全双工之分，全双工是一条线发一条线收。串行总线适宜长距离传输数据。</p><p>串行总线按位（bit）发送和接收。尽管比按字节（byte）的并行通信慢，但是串口可以在使用一根线</p><p>发送数据的同时用另一根线接收数据。它很简单并且能够实现远距离通信。比如 IEEE488 定义并行通行状态时，规定设备线总长不得超过 20 米，并且任意两个设备间的长度不得超过 2 米；而对于串口而言，长</p><p>度可达 1200 米。</p><p>串口通信最重要的参数是波特率、数据位、停止位和奇偶校验。对于两个进行通行的端口，这些参数必须匹配。</p><p>串行总线的数据发送和接收可以使用多种方式，中断方式与 DMA 都较为常见。</p><h3 id="_3-2-5-流水线-⭐⭐" tabindex="-1"><a class="header-anchor" href="#_3-2-5-流水线-⭐⭐" aria-hidden="true">#</a> <strong>3.2.5.流水线（⭐⭐）</strong></h3><h4 id="_3-2-5-1-流水线-–-概念" tabindex="-1"><a class="header-anchor" href="#_3-2-5-1-流水线-–-概念" aria-hidden="true">#</a> <strong>3.2.5.1.流水线 – 概念</strong></h4><p>流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术。各种部件同时处理是针对不同指令而言的，它们可同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度。</p><h4 id="_3-2-5-2-相关参数计算" tabindex="-1"><a class="header-anchor" href="#_3-2-5-2-相关参数计算" aria-hidden="true">#</a> <strong>3.2.5.2.相关参数计算</strong></h4><p>（流水线执行时间计算、流水线吞吐率、流水线加速比、流水线效率）</p><p><strong>流水线建立时间：1条指令执行时间。流水线周期：执行时间最长的一段</strong></p><p><strong>流水线执行时间（理论公式）：(t1+t2+..+tk)+(n-1)*∆t流水线执行时间（实践公式）：k*∆t+(n-1)*∆t</strong></p><p><strong>流水线吞吐率：</strong></p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><img src="'+i+'" alt="" loading="lazy"><strong>流水线最大吞吐率（即流水线周期的倒数）</strong></p><p><strong>流水线加速比：顺序执行时间/流水线执行时间</strong></p><h3 id="_3-2-6-校验码-⭐" tabindex="-1"><a class="header-anchor" href="#_3-2-6-校验码-⭐" aria-hidden="true">#</a> <strong>3.2.6.校验码（<strong>⭐</strong>）</strong></h3><h4 id="_3-2-6-1-概念" tabindex="-1"><a class="header-anchor" href="#_3-2-6-1-概念" aria-hidden="true">#</a> <strong>3.2.6.1.概念</strong></h4><p>码距：一个编码系统的码距是整个编码系统中任意(所有)两个码字的最小距离。</p><h4 id="_3-2-6-2-奇偶校验" tabindex="-1"><a class="header-anchor" href="#_3-2-6-2-奇偶校验" aria-hidden="true">#</a> <strong>3.2.6.2.奇偶校验</strong></h4><p>掌握校验原则等相关概念，只检奇数位错，不能纠错。</p><h4 id="_3-2-6-3-循环校验码crc" tabindex="-1"><a class="header-anchor" href="#_3-2-6-3-循环校验码crc" aria-hidden="true">#</a> <strong>3.2.6.3.循环校验码CRC</strong></h4><p>可查错，不可纠错，运用模二除法计算校验码。（模 2 除法是指在做除法运算的过程中不计其进位的除法。）</p><p>循环冗余校验码编码规律如下：</p><p>① 把待编码的N 位有效信息表示为多项式 M(X)；</p><p>② 把 M(X)左移 K 位，得到 M(X)×XK，这样空出了 K 位，以便拼装K 位余数（即校验位）；</p><p>③ 选取一个K+1 位的产生多项式 G(X)，对 M(X)×XK 做模 2 除；</p><p>④ 把左移K 位以后的有效信息与余数 R(X)做模 2 加减，拼接为 CRC 码，此时的 CRC 码共有N+K位。</p><h4 id="_3-2-6-4-海明校验" tabindex="-1"><a class="header-anchor" href="#_3-2-6-4-海明校验" aria-hidden="true">#</a> <strong>3.2.6.4.海明校验</strong></h4><p>要求掌握相关概念，可查错，可纠错；要求掌握海明校验码校验位计算：2r&gt;=r+m+1。（也可直接以实例进行填空推导）</p><h3 id="_3-2-7-嵌入式系统开发设计-⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#_3-2-7-嵌入式系统开发设计-⭐⭐⭐" aria-hidden="true">#</a> <strong>3.2.7.嵌入式系统开发设计（⭐⭐⭐）</strong></h3><h4 id="_3-2-7-1-嵌入式核心部件" tabindex="-1"><a class="header-anchor" href="#_3-2-7-1-嵌入式核心部件" aria-hidden="true">#</a> <strong>3.2.7.1.嵌入式核心部件</strong></h4><p>（1） MPU 采用增强型通用微处理器。由于嵌入式系统通常应用于环境比较恶劣的环境中，因而 MPU 在工作温度、电磁兼容性以及可靠性方面的要求较通用的标准微处理器高。MPU 在功能方面与标准的微处理器基本上是一样的。</p><p>（2） MCU 又称单片微型计算机(Single Chip Microcomputer)或者单片机，是指随着大规模集成电路的出现及其发展，将计算机的 CPU、RAM、ROM、定时计数器和多种I/O 接口集成在一片芯片上，形成芯片级的计算机，为不同的应用场合做不同组合控制。</p><p>（3） DSP 是一种独特的微处理器，是以数字信号来处理大量信息的器件。其实时运行速度可达每秒数以千万条复杂指令程序，远远超过通用微处理器，它的强大数据处理能力和高运行速度，是最值得称道的两大特色。</p><p>（4） SoC 称为系统级芯片，也有称片上系统,意指它是一个产品，是一个有专用目标的集成电路，其中包含完整系统并有嵌入软件的全部内容。</p><h4 id="_3-2-7-2-哈弗结构与冯·诺依曼结构对比" tabindex="-1"><a class="header-anchor" href="#_3-2-7-2-哈弗结构与冯·诺依曼结构对比" aria-hidden="true">#</a> <strong>3.2.7.2.哈弗结构与冯·诺依曼结构对比</strong></h4><h5 id="_3-2-7-2-1-冯·诺依曼结构-也称普林斯顿结构" tabindex="-1"><a class="header-anchor" href="#_3-2-7-2-1-冯·诺依曼结构-也称普林斯顿结构" aria-hidden="true">#</a> 3.2.7.2.1. <strong>冯·诺依曼结构（也称普林斯顿结构）</strong></h5><p>是一种将程序指令存储器和数据存储器合并在一起的存储器结构。（冯·诺依曼体系结构冯·诺依曼理论的要点是：计算机的数制采用二进制；计算机应该按照程序顺序执行。人们把冯·诺依曼的这个理论称为冯·诺依曼体系结构。）特点：</p><p>一般用于PC 处理器，如 I3，I5，I7 处理器指令与数据存储器合并在一起</p><p>指令与数据都通过相同的数据总线传输</p><h5 id="_3-2-7-2-2-哈佛结构" tabindex="-1"><a class="header-anchor" href="#_3-2-7-2-2-哈佛结构" aria-hidden="true">#</a> 3.2.7.2.2. <strong>哈佛结构</strong></h5><p>是一种将程序指令存储和数据存储分开的存储器结构。哈佛结构是一种并行体系结构，它的主要特点是将程序和数据存储在不同的存储空间中，即程序存储器和数据存储器是两个独立的存储器，每个存储器独立编址、独立访问。特点：</p><p>一般用于嵌入式系统处理器（DSP）</p><p>指令与数据分开存储，程序指令存储和数据存储分开，可以使指令和数据有不同的数据宽度，可以并行读取，有较高数据的吞吐率</p><p>有 4 条总线：指令和数据的数据总线与地址总线</p><h5 id="_3-2-7-2-3-哈弗结构的应用-dsp芯片" tabindex="-1"><a class="header-anchor" href="#_3-2-7-2-3-哈弗结构的应用-dsp芯片" aria-hidden="true">#</a> 3.2.7.2.3. <strong>哈弗结构的应用-DSP芯片</strong></h5><p>在哈弗结构布局下，DSP 得以实现单周期的 MAC 指令。由于程序和数据存储器在两个分开的空间中，因此取指和执行能完全重叠运行。</p><p>流水线。与哈佛结构相关，DSP 芯片广泛采用 2-6 级流水线以减少指令执行时间，从而增强了处理器的处理能力。这可使指令执行能完全重叠，每个指令周期内，不同的指令都处于激活状态。</p><p>独立的硬件乘法器。实现多媒体功能及数字信号处理的系统中，算法的实现和数字滤波都是计算密集型的应用。在这些场合，乘法运算是数字处理的重要组部分，是各种算法实现的基本元素之一。乘法的执行速度越快，DSP 处理器的性能越高。相比与一般的处理器需要 30-40 个指令周期，DSP 芯片的特征就是有一个专用的硬件乘法器，乘法可以在一个周期内完成。</p><p>特殊的 DSP 指令。DSP 的另一特征是采用特殊的指令，专为数字信号处理中的一些常用算法优化。这些特殊指令为一些典型的数字处理提供加速，可以大幅提高处理器的执行效率。使一些高速系统的实时数据处理成为可能。</p><p>独立的 DMA 总线和控制器。有一组或多组独立的 DMA 总线，与CPU 的程序、数据总线并行工</p><p>作。在不影响CPU 工作的条件下，DMA 的速度已经达到 800MB/S 以上。这在需要大数据量进行交换的场合可以减小CPU 的开销，提高数据的吞吐率。提高系统的并行执行能力。</p><p>多处理器接口。使多个处理器可以很方便的并行或串行工作以提高处理速度。</p><p>JTAG（Joint Test Action Group）标准测试接口（IEEE 1149 标准接口）。便于对 DSP 作片上的在线仿真和多 DSP 条件下的调试。</p><p>快速的指令周期。哈佛结构，流水线操作，专用的硬件乘法器，特殊的 DSP 指令再加上集成电路的优化设计，可使 DSP 芯片的指令周期在 10ns 以下。快速的指令周期可以使DSP 芯片能够实时实现许多 DSP 应用。</p><h4 id="_3-2-7-3-板级支持包-bsp-也称为硬件抽象层hal" tabindex="-1"><a class="header-anchor" href="#_3-2-7-3-板级支持包-bsp-也称为硬件抽象层hal" aria-hidden="true">#</a> <strong>3.2.7.3.板级支持包（BSP，也称为硬件抽象层HAL）</strong></h4><h5 id="_3-2-7-3-1-概念" tabindex="-1"><a class="header-anchor" href="#_3-2-7-3-1-概念" aria-hidden="true">#</a> 3.2.7.3.1. <strong>概念</strong></h5><p>板级支持包（BSP）是介于主板硬件和操作系统中驱动层程序之间的一层，一般认为它属于操作系统一部分，主要是实现对操作系统的支持，为上层的驱动程序提供访问硬件设备寄存器的函数包，使之能够更好的运行于硬件主板。在嵌入式系统软件的组成中，就有 BSP。BSP 是相对于操作系统而言的，不同的操作系统对应于不同定义形式的 BSP,例如 VxWorks 的 BSP 和 Linux 的 BSP 相对于某一 CPU 来说尽管实现的功能一样，可是写法和接口定义是完全不同的，所以写 BSP 一定要按照该系统 BSP 的定义形式来写</p><p>（BSP 的编程过程大多数是在某一个成型的 BSP 模板上进行修改）。这样才能与上层 OS 保持正确的接口，良好的支持上层 OS。</p><h5 id="_3-2-7-3-2-功能" tabindex="-1"><a class="header-anchor" href="#_3-2-7-3-2-功能" aria-hidden="true">#</a> 3.2.7.3.2. <strong>功能</strong></h5><p>BSP 主要功能为屏蔽硬件，提供操作系统及硬件驱动，具体功能包括：</p><p>单板硬件初始化，主要是CPU 的初始化，为整个软件系统提供底层硬件支持为操作系统提供设备驱动程序和系统中断服务程序</p><p>定制操作系统的功能，为软件系统提供一个实时多任务的运行环境初始化操作系统，为操作系统的正常运行做好准备。</p><h5 id="_3-2-7-3-3-bsp特点" tabindex="-1"><a class="header-anchor" href="#_3-2-7-3-3-bsp特点" aria-hidden="true">#</a> 3.2.7.3.3. <strong>BSP特点</strong></h5><p>板级支持包一般包含相关底层硬件的初始化、数据的输入／输出操作和硬件设备的配置等功能，它主要具有以下两个特点。</p><p><strong>硬件相关性</strong>，因为嵌入式实时系统的硬件环境具有应用相关性，而作为上层软件与硬件平台之间的接口，BSP 需为操作系统提供操作和控制具体硬件的方法。</p><p><strong>操作系统相关性</strong>，不同的操作系统具有各自的软件层次结构，因此不同操作系统具有特定的硬件接口形式。</p><h4 id="_3-2-7-4-交叉开发环境" tabindex="-1"><a class="header-anchor" href="#_3-2-7-4-交叉开发环境" aria-hidden="true">#</a> <strong>3.2.7.4.交叉开发环境</strong></h4><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>嵌入式系统的软件开发方法采用的不是通用的开发方法，而是交叉平台开发方法（CPD），即软件在一个通用的平台上开发，而在另一个嵌入式目标平台上运行。这个用于开发嵌入式软件的通用平台通常叫做宿主机系统，被开发的嵌入式系统成为目标机系统。而当软件执行环境和开发环境一致时的开发过程则成为本地开发（ND）。一个典型的交叉平台开放环境如上图所示，通常包含三个高度集成的部分：</p><p>（1） 运行在宿主机和目标机上的强有力的交叉开发工具和实用程序；</p><p>（2） 运行在目标机上的高性能、可裁剪的实时操作系统；</p><p>（3） 连接宿主机和目标机的多种通信方式，如以太网、串口线、在线仿真机（ICE）或 ROM 仿真机等。</p><h4 id="_3-2-7-5-嵌入式系统初始化过程" tabindex="-1"><a class="header-anchor" href="#_3-2-7-5-嵌入式系统初始化过程" aria-hidden="true">#</a> <strong>3.2.7.5.嵌入式系统初始化过程</strong></h4><p>片级初始化 → 板级初始化 → 系统初始化</p><p>**（1）片级初始化：**完成嵌入式微处理器的初始化，包括设置嵌入式微处理器的核心寄存器和控制寄存器、嵌入式微处理器核心工作模式和嵌入式微处理器的局部总线模式等。片级初始化把嵌入式微处理器从上电时的默认状态逐步设置成系统所要求的工作状态。这是一个纯硬件的初始化过程。</p><p><strong>（2）板级初始化</strong>：完成嵌入式微处理器以外的其他硬件设备的初始化。另外，还需设置某些软件的</p><p>数据结构和参数，为随后的系统级初始化和应用程序的运行建立硬件和软件环境。这是一个同时包含软硬件两部分在内的初始化过程。</p><p>**（3）系统初始化：**该初始化过程以软件初始化为主，主要进行操作系统的初始化。BSP 将对嵌入式微处理器的控制权转交给嵌入式操作系统，由操作系统完成余下的初始化操作，包含加载和初始化与硬件无关的设备驱动程序，建立系统内存区，加载并初始化其他系统软件模块，如网络系统、文件系统等。最后，操作系统创建应用程序环境，并将控制权交给应用程序的入口。</p><p>【PC 机启动流程：BIOS-&gt;主引导记录-&gt;操作系统】</p><h2 id="_3-3-章节问答" tabindex="-1"><a class="header-anchor" href="#_3-3-章节问答" aria-hidden="true">#</a> <strong>3.3.章节问答</strong></h2><h3 id="_3-3-1-移臂调度过程中-同一柱面有多个扇区怎么办" tabindex="-1"><a class="header-anchor" href="#_3-3-1-移臂调度过程中-同一柱面有多个扇区怎么办" aria-hidden="true">#</a> <strong>3.3.1.移臂调度过程中，同一柱面有多个扇区怎么办？</strong></h3><p>答：一般而言，涉及到移臂调度算法时，只需要考虑移臂过程，查看柱面顺序即可。旋转等待时间跟多磁头（盘面）是否并发读写有关系，从目前磁盘技术来看，是支持多个盘面同时读写的。 所以只要是同一柱面，扇区顺序没有要求。</p><h3 id="_3-3-2-为什么说高速缓存对程序员来说是透明的-什么是透明" tabindex="-1"><a class="header-anchor" href="#_3-3-2-为什么说高速缓存对程序员来说是透明的-什么是透明" aria-hidden="true">#</a> <strong>3.3.2.为什么说高速缓存对程序员来说是透明的？什么是透明？</strong></h3><p>答：这里的<strong>透明指的是不需要了解其中的机制甚至是看不到这个层次，也就是不直接操作。高速缓存是由硬件自动完成的，所以对程序员来说是透明的。</strong></p><h3 id="_3-3-3-磁盘读取数据过程中单缓冲区和双缓冲区有什么区别" tabindex="-1"><a class="header-anchor" href="#_3-3-3-磁盘读取数据过程中单缓冲区和双缓冲区有什么区别" aria-hidden="true">#</a> <strong>3.3.3.磁盘读取数据过程中单缓冲区和双缓冲区有什么区别？</strong></h3><p>答：磁盘读取涉及到缓冲区一般形式如下：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td><img src="'+c+'" alt="" loading="lazy"></td></tr></tbody></table><p>处理数据可以理解为三个处理步骤：①从磁盘读入到缓冲区；②从缓冲区读入到（内存）用户区；③处理（内存）用户区数据。</p><p>如果是单缓冲区，则意味步骤①和②都需要访问临界资源——缓冲区，所以需要合并成一个操作阶段。（缓冲区同一时刻只允许一个进程访问）</p><p>如果是双缓冲区，可以实现读入到缓冲区 2 和从缓冲区 1 读入到用户区的并发。可以构造流水线进行计算。</p><p>单缓冲区：使用缓冲区时不能并行，必须分开执行，时间为①和②的时间之和；然后处理数据。构造成流水线后，整个过程划分为 2 个阶段，分别是①和②的时间之和，③的时间，根据流水线执行公式进行计算。</p><p>双缓冲区：读入缓冲区，和从缓冲区读入用户区，可以对不同的缓冲区进行，也就是说，可以并行处理。对于这里构造成流水线后，整个过程划分为 3 个阶段，即①、②、③。根据流水线执行公式进行计算结课。</p><p>PS：注意理解这里流水线的构造过程。</p><h3 id="_3-3-4-流水线执行时间计算有时间公式和理论公式-如何选择" tabindex="-1"><a class="header-anchor" href="#_3-3-4-流水线执行时间计算有时间公式和理论公式-如何选择" aria-hidden="true">#</a> <strong>3.3.4.流水线执行时间计算有时间公式和理论公式，如何选择？</strong></h3><p>答：一般而言，我们的计算都是以理论公式为准，如果在考试中理论公式找不到答案再带入实践公式。</p><h3 id="_3-3-5-若信息码字为111000110-生成多项式g-x-x5-x3-x-1-crc校验码如何计算" tabindex="-1"><a class="header-anchor" href="#_3-3-5-若信息码字为111000110-生成多项式g-x-x5-x3-x-1-crc校验码如何计算" aria-hidden="true">#</a> <strong>3.3.5.若信息码字为111000110，生成多项式G(x)=x5+x3+x+1，CRC校验码如何计算？</strong></h3><p>答：CRC 编码过程中，信息码和生成多项式都是已知的。具体过程：</p><p>将生成多项式的系数作为除数（101011）；生成多项式的最高幂次数“5”作为检验码的位数。将信息码左移校验码位数“5”位，作为被除数。执行模 2 除法，即异或操作。得到（5 位）余数（11001）即为校验码。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-3-6-企业信息门户和企业应用门户的区别是什么" tabindex="-1"><a class="header-anchor" href="#_3-3-6-企业信息门户和企业应用门户的区别是什么" aria-hidden="true">#</a> <strong>3.3.6.企业信息门户和企业应用门户的区别是什么？</strong></h3><p>答：企业应用门户强调的是对企业业务流程的集成。它是以业务流程和企业应用为核心的，把业务流程中功能不同的应用模块通过门户技术集成在一起的。</p>',189),S=[l];function f(b,u){return r(),a("div",null,S)}const R=t(C,[["render",f],["__file","计算机组成与体系结构.html.vue"]]);export{R as default};
