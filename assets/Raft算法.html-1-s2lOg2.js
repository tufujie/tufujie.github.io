const e=JSON.parse('{"key":"v-cd74c6be","path":"/home/%E5%88%86%E5%B8%83%E5%BC%8F/Raft%E7%AE%97%E6%B3%95.html","title":"Raft算法","lang":"zh-CN","frontmatter":{"title":"Raft算法","description":"1 背景 当今的数据中心和应用程序在高度动态的环境中运行，为了应对高度动态的环境，它们通过额外的服务器进行横向扩展，并且根据需求进行扩展和收缩。同时，服务器和网络故障也很常见。 因此，系统必须在正常操作期间处理服务器的上下线。它们必须对变故做出反应并在几秒钟内自动适应；对客户来说的话，明显的中断通常是不可接受的。 幸运的是，分布式共识可以帮助应对这些挑战。 1.1 拜占庭将军 在介绍共识算法之前，先介绍一个简化版拜占庭将军的例子来帮助理解共识算法。 假设多位拜占庭将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成是否要进攻的一致性决定？","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E5%88%86%E5%B8%83%E5%BC%8F/Raft%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"Raft算法"}],["meta",{"property":"og:description","content":"1 背景 当今的数据中心和应用程序在高度动态的环境中运行，为了应对高度动态的环境，它们通过额外的服务器进行横向扩展，并且根据需求进行扩展和收缩。同时，服务器和网络故障也很常见。 因此，系统必须在正常操作期间处理服务器的上下线。它们必须对变故做出反应并在几秒钟内自动适应；对客户来说的话，明显的中断通常是不可接受的。 幸运的是，分布式共识可以帮助应对这些挑战。 1.1 拜占庭将军 在介绍共识算法之前，先介绍一个简化版拜占庭将军的例子来帮助理解共识算法。 假设多位拜占庭将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成是否要进攻的一致性决定？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-03T10:30:52.000Z"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-01-03T10:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Raft算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-03T10:30:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1 背景","slug":"_1-背景","link":"#_1-背景","children":[{"level":3,"title":"1.1 拜占庭将军","slug":"_1-1-拜占庭将军","link":"#_1-1-拜占庭将军","children":[]},{"level":3,"title":"1.2 共识算法","slug":"_1-2-共识算法","link":"#_1-2-共识算法","children":[]}]},{"level":2,"title":"2 基础","slug":"_2-基础","link":"#_2-基础","children":[{"level":3,"title":"2.1 节点类型","slug":"_2-1-节点类型","link":"#_2-1-节点类型","children":[]},{"level":3,"title":"2.2 任期","slug":"_2-2-任期","link":"#_2-2-任期","children":[]},{"level":3,"title":"2.3 日志","slug":"_2-3-日志","link":"#_2-3-日志","children":[]}]},{"level":2,"title":"3 领导人选举","slug":"_3-领导人选举","link":"#_3-领导人选举","children":[]},{"level":2,"title":"4 日志复制","slug":"_4-日志复制","link":"#_4-日志复制","children":[]},{"level":2,"title":"5 安全性","slug":"_5-安全性","link":"#_5-安全性","children":[{"level":3,"title":"5.1 选举限制","slug":"_5-1-选举限制","link":"#_5-1-选举限制","children":[]},{"level":3,"title":"5.2 节点崩溃","slug":"_5-2-节点崩溃","link":"#_5-2-节点崩溃","children":[]},{"level":3,"title":"5.3 时间与可用性","slug":"_5-3-时间与可用性","link":"#_5-3-时间与可用性","children":[]}]},{"level":2,"title":"6 参考","slug":"_6-参考","link":"#_6-参考","children":[]}],"git":{"createdTime":1704204500000,"updatedTime":1704277852000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":2},{"name":"tufujie","email":"jef.tu@foxmail.com","commits":1}]},"readingTime":{"minutes":12.04,"words":3613},"filePathRelative":"home/分布式/Raft算法.md","localizedDate":"2024年1月2日","excerpt":"<h2> 1 背景</h2>\\n<p>当今的数据中心和应用程序在高度动态的环境中运行，为了应对高度动态的环境，它们通过额外的服务器进行横向扩展，并且根据需求进行扩展和收缩。同时，服务器和网络故障也很常见。</p>\\n<p>因此，系统必须在正常操作期间处理服务器的上下线。它们必须对变故做出反应并在几秒钟内自动适应；对客户来说的话，明显的中断通常是不可接受的。</p>\\n<p>幸运的是，分布式共识可以帮助应对这些挑战。</p>\\n<h3> 1.1 拜占庭将军</h3>\\n<p>在介绍共识算法之前，先介绍一个简化版拜占庭将军的例子来帮助理解共识算法。</p>\\n<blockquote>\\n<p>假设多位拜占庭将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成是否要进攻的一致性决定？</p>\\n</blockquote>","autoDesc":true}');export{e as data};
