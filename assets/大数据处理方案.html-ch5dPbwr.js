const e=JSON.parse('{"key":"v-870ae5f2","path":"/home/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88.html","title":"大数据处理方案","lang":"zh-CN","frontmatter":{"title":"大数据处理方案","description":"简介 本文介绍大数据的一些处理方案。 如何统计大数据量重复出现的次数？比如，数据量超过了4G，但内存只有4G，该如何处理？ 概述 处理海量数据问题，无非就是： 分而治之(hash映射) + hash统计 + 排序； Bloom filter/Bitmap； Trie树/数据库/倒排索引； 外排序； 分布式处理(hadoop/mapreduce)。 方案1：hash映射 + hash统计 + 排序","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/home/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"Jef Blog"}],["meta",{"property":"og:title","content":"大数据处理方案"}],["meta",{"property":"og:description","content":"简介 本文介绍大数据的一些处理方案。 如何统计大数据量重复出现的次数？比如，数据量超过了4G，但内存只有4G，该如何处理？ 概述 处理海量数据问题，无非就是： 分而治之(hash映射) + hash统计 + 排序； Bloom filter/Bitmap； Trie树/数据库/倒排索引； 外排序； 分布式处理(hadoop/mapreduce)。 方案1：hash映射 + hash统计 + 排序"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T12:47:39.000Z"}],["meta",{"property":"article:author","content":"Jef"}],["meta",{"property":"article:modified_time","content":"2024-01-25T12:47:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大数据处理方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-25T12:47:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jef\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"方案1：hash映射 + hash统计 + 排序","slug":"方案1-hash映射-hash统计-排序","link":"#方案1-hash映射-hash统计-排序","children":[]},{"level":2,"title":"方案2：Bloom filter/Bitmap","slug":"方案2-bloom-filter-bitmap","link":"#方案2-bloom-filter-bitmap","children":[]},{"level":2,"title":"方案3：Trie树/数据库/倒排索引","slug":"方案3-trie树-数据库-倒排索引","link":"#方案3-trie树-数据库-倒排索引","children":[]},{"level":2,"title":"方案4：外排序","slug":"方案4-外排序","link":"#方案4-外排序","children":[]},{"level":2,"title":"方案5：分布式处理 Mapreduce","slug":"方案5-分布式处理-mapreduce","link":"#方案5-分布式处理-mapreduce","children":[]}],"git":{"createdTime":1706186859000,"updatedTime":1706186859000,"contributors":[{"name":"tufujie","email":"tufj@hua-cloud.com.cn","commits":1}]},"readingTime":{"minutes":14.41,"words":4322},"filePathRelative":"home/海量数据/大数据处理方案.md","localizedDate":"2024年1月25日","excerpt":"<h2> 简介</h2>\\n<p>本文介绍大数据的一些处理方案。</p>\\n<p>如何统计大数据量重复出现的次数？比如，数据量超过了4G，但内存只有4G，该如何处理？</p>\\n<h2> 概述</h2>\\n<p>处理海量数据问题，无非就是：</p>\\n<ol>\\n<li>分而治之(hash映射) + hash统计 + 排序；</li>\\n<li>Bloom filter/Bitmap；</li>\\n<li>Trie树/数据库/倒排索引；</li>\\n<li>外排序；</li>\\n<li>分布式处理(hadoop/mapreduce)。</li>\\n</ol>\\n<h2> 方案1：hash映射 + hash统计 + 排序</h2>","autoDesc":true}');export{e as data};
